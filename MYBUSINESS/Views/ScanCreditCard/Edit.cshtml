@model MYBUSINESS.Models.ScanCreditCardViewModel

@{
    ViewBag.Title = "Update ScanBankDeposit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css">
<link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css" rel="stylesheet">
<link href="@Url.Content("~/Content/custom/custom.css")" rel="stylesheet" type="text/css" />

<!-- JavaScript -->
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js"></script>

<!-- Your custom scripts -->
<script src="~/Content/custom/subItem_BOM.js"></script>
<script src="~/Content/custom/downloads/jquery.mcautocomplete.js"></script>
<script src="~/Content/custom/downloads/jquery.scannerdetection.js"></script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <section class="content">
        <div class="row">
            <!-- left column -->
            <div class="col-md-6">
                <!-- general form elements -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Scan Credit Card</h3>
                    </div>


                    <div class="box-body">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @*@Html.HiddenFor(model => model.Id)*@


                        <div class="form-group">
                            @Html.LabelFor(model => Model.ScanCreditCard.Id, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => Model.ScanCreditCard.Id, new { htmlAttributes = new { @class = "form-control", @Readonly = "Readonly" } })
                            @Html.ValidationMessageFor(model => Model.ScanCreditCard.Id, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ScanCreditCard.StoreId, "Select Store", new { @class = "control-label" })

                            @if (((SelectList)ViewBag.StoreList).Any())
                            {
                                @Html.DropDownListFor(
                                    model => model.ScanCreditCard.StoreId,
                                    (SelectList)ViewBag.StoreList,
                                    "Select a Store",
                                    new { @class = "form-control", @id = "storeDropdown" }
                                )
                            }
                            else
                            {
                                <p class="text-danger">No stores available for selection.</p>
                            }

                            @Html.ValidationMessageFor(model => model.ScanCreditCard.StoreId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.ScanCreditCard.Date, htmlAttributes: new { @class = "control-label" })
                            @{
                                var attributes = new Dictionary<string, object>
                                                {
    { "class", "form-control" },
    { "type", "date" }
};
                            }
                            @Html.TextBoxFor(model => model.ScanCreditCard.Date, "{0:yyyy-MM-dd}", attributes)
                            @Html.ValidationMessageFor(model => model.ScanCreditCard.Date, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => Model.BOM.ShelfLife, htmlAttributes: new { @class = "control-label" })*@
                            <label>Input Amount</label>
                            @Html.EditorFor(model => model.ScanCreditCard.Amount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.ScanCreditCard.Amount, "", new { @class = "text-danger" })

                        </div>

                    </div>


                    <div class="box-footer">
                        <input type="submit" id="CreateSO" value="Update" class="btn btn-primary" />
                        @Html.ActionLink("Back to List", "Index")
                    </div>





                </div>
            </div>
            <div class="col-md-6">
                <!-- general form elements -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Notes</h3>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ScanCreditCard.Note, htmlAttributes: new { @class = "control-label" })
                        @Html.TextAreaFor(model => model.ScanCreditCard.Note, new
                        {
                            @class = "form-control",
                            id = "compose_textarea", // ✔️ This is good!
                            rows = "1",
                            cols = "100",
                            placeholder = "Notes/Pictures",
                            data_toggle = "tooltip",
                            data_placement = "top",
                            title = "Notes"
                        })
                        @Html.ValidationMessageFor(model => model.ScanCreditCard.Note, "", new { @class = "text-danger" })
                    </div>

                    <div class="box-footer">
                    </div>
                </div>
            </div>






        </div>

    </section>

}



<script>

  //$(document).ready(function () {
  //  document.getElementById('SOCreate').reset(); // has to be handle
  //});
  //$(document).ready(function () {
  //document.getElementById('SOCreate').reset(); // has to be handle
  //});


$(document).ready(function () {
    // Pre-fill the hidden field with the initial value of the Unit field
    $('#unitHiddenField').val($('#unitField').val());

    // Initialize Summernote with proper configuration
    $('#compose_textarea').summernote({
        height: 400,
        toolbar: [
            ['style', ['bold', 'italic', 'underline', 'clear']],
            ['font', ['strikethrough', 'superscript', 'subscript']],
            ['para', ['ul', 'ol', 'paragraph']],
            ['insert', ['picture', 'link', 'video']],
            ['misc', ['fullscreen', 'codeview', 'help']]
        ],
        callbacks: {
            onImageUpload: function(files) {
                for (var i = 0; i < files.length; i++) {
                    uploadImage(files[i]);
                }
            }
        }
    });

    // Inject existing content into Summernote
    var existingContent = @Html.Raw(Json.Encode(Model.ScanCreditCard.Note));
    if (existingContent) {
        $('#compose_textarea').summernote('code', existingContent);
    }

    // Form submission handler
    $('form').on('submit', function() {
        var content = $('#compose_textarea').summernote('code');
        $('#compose_textarea').val(content);
    });

    // Enhanced image upload function
    function uploadImage(file) {
        var formData = new FormData();
        formData.append("file", file);

        $.ajax({
            url: '@Url.Action("UploadImage", "ShopManage")',
            type: "POST",
            data: formData,
            contentType: false,
            processData: false,
            success: function(response) {
                if (typeof response === 'string') {
                    // Backward compatibility for string responses
                    $('#compose_textarea').summernote('insertImage', response);
                } else if (response.success) {
                    $('#compose_textarea').summernote('insertImage', response.url);
                } else {
                    alert(response.message || "Upload failed");
                }
            },
            error: function(xhr) {
                try {
                    var errorResponse = JSON.parse(xhr.responseText);
                    alert(errorResponse.message || "Upload error occurred");
                } catch (e) {
                    alert("Image upload failed. Please try again.");
                }
                console.error("Upload error:", xhr.responseText);
            }
        });
    }
});



    txtSerialNum = 0;
    TriggerBodyEvents();



    @{
        var carton = 0; //= (d.Stock / d.PerPack);
        var piece = 0;
        foreach (var d in Model.Products)
        {
            carton = (int)(d.Stock / d.PerPack);
            piece = (int)(d.Stock % d.PerPack);
            if (piece == 0)
 {
    @:products.push([ "@d.Id", "@d.Name", "@d.Unit", "@d.Unit", "@carton" ]);
 }
 else
 {
     @:products.push(["@d.Id", "@d.Name", "@d.Unit", "@carton,@piece"]);
 }
 @:productsBarcodes.push(["@d.Id", "@d.BarCode"]);

        }
     }


        $('.from-date-picker').datetimepicker({
            dateFormat: "dd-M-yy",
            timeFormat: "hh:mm tt",
            showOn: "both",
            timeInput: true,
            stepHour: 1,
            stepMinute: 5,
            oneLine: true,
            //changeMonth: true,
            //changeYear: true,
            controlType: 'select',
            buttonImageOnly: true,
            buttonImage: "http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",
            buttonText: "Select date"
        });




         $("#NewData").dialog({
            autoOpen: false,
             title: 'Should not sell-out, already rented on thses dates',
            closeText: '', //Changes the text of the titlebar-close button to hello instead of default Close
            width: 500,
            Height:500

        });

        function FetchProductRentStatus() {
        //alert('wwww');

            var date = new Date();
            var day = date.getDate();       // yields date
            var month = date.getMonth() + 1;    // yields month (add one as '.getMonth()' is zero indexed)
            var year = date.getFullYear();  // yields year
            var hour = date.getHours();     // yields hours
            var minute = date.getMinutes(); // yields minutes
            var second = date.getSeconds(); // yields seconds

            // After this construct a string with the above results as below
            var sellDate = day + "/" + month + "/" + year;// + " " + hour + ':' + minute + ':' + second;

            var prodId = $('#idn' + clickedIdNum).val();




            $.ajax({
                url: "@Url.Action("ProductRentStatus","SOSR")",
                data: { 'prodId': prodId, 'sellDate': sellDate},
                type: "GET",
                cache: false,
                success: function (data) {
                    //toastr.success('Hi! I am success message.');
                    //var abc = data;
                    //alert(data);
                    if (data.indexOf('12:00:00 AM') != -1) {

                        $("#NewData").html(data);
                        $("#NewData").dialog("open");
                    //}
                    }


                },
                error: function (xhr, ajaxOptions, thrownError) {
                    //$('#lblCommentsNotification').text("Error encountered while saving the comments.");
                    alert('Data provided was not valid');
                }
            });
        }

        //alert(IsReturn);

        $('#isService').on('change', function () {
            if (this.value == 'true')
            //.....................^.......
            {
                $("#pprice").hide();
                $("#stk").hide();
            }
            else {
                $("#pprice").show();
                $("#stk").show();
            }
        });

</script>
@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@
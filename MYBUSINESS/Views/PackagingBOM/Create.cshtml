@*@model MYBUSINESS.Models.BOM*@
@model MYBUSINESS.Models.PacakgingBOMViewModel
@{
    ViewBag.Title = "Create BOM";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}
@if (TempData["ErrorMessage"] != null)
{
    <script type="text/javascript">
        alert('@TempData["ErrorMessage"]');
    </script>
}

<!-- Content Wrapper. Contains page content -->
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <section class="content">
        <div class="row">
            <!-- left column -->
            <div class="col-md-6">
                <!-- general form elements -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Create New Packaging BOM</h3>
                    </div>


                    <div class="box-body">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => Model.PackagingBOM.Id, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => Model.PackagingBOM.Id, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.SuggestedId, @readonly = "readonly" } })
                            @Html.ValidationMessageFor(model => Model.PackagingBOM.Id, "", new { @class = "text-danger" })

                        </div>

                        @*<div class="form-group">
                                @Html.LabelFor(model => model.BOM.ProductId, "Select Product", new { @class = "control-label" })
                                @Html.DropDownListFor(
                                    model => model.BOM.ProductId,
                                    (SelectList)ViewBag.ProductList, // Use the correct ViewBag property
                                    "Select a Product", // Placeholder text
                                    new { @class = "form-control" }
                                )
                            </div>*@
                        @*<div class="form-group">
                                @Html.LabelFor(model => model.BOM.ProductId, "Select Product", new { @class = "control-label" })
                                @Html.DropDownListFor(
                                    model => model.BOM.ProductId,
                                    (SelectList)ViewBag.ProductList,
                                    "Select a Product",
                                    new { @class = "form-control product-dropdown", @id = "productDropdown" }
                                )
                                @Html.ValidationMessageFor(model => model.BOM.ProductId, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.Label("Unit", new { @class = "control-label" })
                                <input type="text" id="unitField" class="form-control" readonly placeholder="Unit will be displayed here" />
                                @Html.HiddenFor(model => model.BOM.Unit, new { @id = "unitHiddenField" })
                                @Html.ValidationMessageFor(model => model.BOM.Unit, "", new { @class = "text-danger" })
                            </div>*@

                        <div class="form-group">
                            @Html.LabelFor(model => model.PackagingBOM.ProductId, "Select Product", new { @class = "control-label" })

                            @if (((SelectList)ViewBag.ProductList).Any())
                            {
                                @Html.DropDownListFor(
                                    model => model.PackagingBOM.ProductId,
                                    (SelectList)ViewBag.ProductList,
                                    "Select a Product",
                                    new { @class = "form-control product-dropdown", @id = "productDropdown" }
                                )
                            }
                            else
                            {
                                <p class="text-danger">No products available for creating a BOM.</p>
                            }

                            @Html.ValidationMessageFor(model => model.PackagingBOM.ProductId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.Label("Unit", new { @class = "control-label" })
                            <input type="text" id="unitField" class="form-control" readonly placeholder="Unit will be displayed here" />
                            @Html.HiddenFor(model => model.PackagingBOM.Unit, new { @id = "unitHiddenField" })
                            @Html.ValidationMessageFor(model => model.PackagingBOM.Unit, "", new { @class = "text-danger" })
                        </div>
                        @*<div class="form-group">
                                @Html.Label("Variable Product ID", new { @class = "control-label" })
                                <input type="text" id="variableProductIdField" class="form-control" readonly placeholder="Variable Product ID will be displayed here" />
                                @Html.HiddenFor(model => Model.Product.VarProdParentId, new { @id = "variableProductIdHiddenField" })
                            </div>*@





                        @*<div class="form-group">
                                @Html.LabelFor(model => model.BOM.ProductId, "Select Product", new { @class = "control-label" })
                                @Html.DropDownListFor(
                                    model => model.BOM.ProductId,
                                    (SelectList)ViewBag.ProductList,
                                    "Select a Product",
                                    new { @class = "form-control product-dropdown", @id = "productDropdown" }
                                )
                                @Html.ValidationMessageFor(model => model.BOM.ProductId, "", new { @class = "text-danger" })
                            </div>*@

                        @*<div class="form-group">
                                @Html.Label("Unit", new { @class = "control-label" })
                                <input type="text" id="unitField" class="form-control" readonly placeholder="Unit will be displayed here" />
                                <input type="hidden" name="BOM.Unit" id="unitHiddenField" />
                            </div>*@



                        <div class="form-group">
                            @Html.LabelFor(model => Model.PackagingBOM.Remarks, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => Model.PackagingBOM.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.PackagingBOM.Remarks, "", new { @class = "text-danger" })

                        </div>


                        <!--<div class="form-group">
                        @Html.LabelFor(model => Model.PackagingBOM.Saleable, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => Model.PackagingBOM.Saleable)-->
                        @*@Html.EditorFor(model => model.Saleable, new[] { new SelectListItem { Text = "Yes", Value = "True", Selected = true }, new SelectListItem { Text = "No", Value = "False" } })*@
                        @*@Html.CheckBoxFor(m => m.Saleable, new { @value = "true" })*@
                        <!--@Html.ValidationMessageFor(model => Model.PackagingBOM.Saleable, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.PackagingBOM.Purchasable, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => Model.PackagingBOM.Purchasable)-->
                        @*@Html.EditorFor(model => model.Saleable, new[] { new SelectListItem { Text = "Yes", Value = "True", Selected = true }, new SelectListItem { Text = "No", Value = "False" } })*@
                        @*@Html.CheckBoxFor(m => m.Saleable, new { @value = "true" })*@
                        <!--@Html.ValidationMessageFor(model => Model.PackagingBOM.Purchasable, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => Model.PackagingBOM.Manufacturable, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => Model.PackagingBOM.Manufacturable)-->
                        @*@Html.EditorFor(model => model.Saleable, new[] { new SelectListItem { Text = "Yes", Value = "True", Selected = true }, new SelectListItem { Text = "No", Value = "False" } })*@
                        @*@Html.CheckBoxFor(m => m.Saleable, new { @value = "true" })*@
                        <!--@Html.ValidationMessageFor(model => Model.PackagingBOM.Manufacturable, "", new { @class = "text-danger" })
                        </div>-->

                        <div class="form-group">
                            @*@Html.LabelFor(model => Model.BOM.ProductionProcessCateogry, htmlAttributes: new { @class = "control-label" })*@
                            <label>Production Process Cateogry</label>
                            @Html.DropDownListFor(
                   model => Model.PackagingBOM.ProductionProcessCateogry,
      new SelectList(
          new List<SelectListItem>
          {
              new SelectListItem { Text = "Mixing", Value = "Mixing" },
              new SelectListItem { Text = "Molding", Value = "Molding", Selected = true },
              new SelectListItem { Text = "Packaging", Value = "Packaging" }
          },
          "Value",
          "Text"
      ),
      new { @class = "form-control" }
  )


                            @Html.ValidationMessageFor(model => Model.PackagingBOM.ProductionProcessCateogry, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            <label>Production Process Description</label>
                            @*@Html.LabelFor(model => Model.BOM.ProductionProcessDescription, htmlAttributes: new { @class = "control-label" })*@

                            @Html.EditorFor(model => Model.PackagingBOM.ProductionProcessDescription, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.PackagingBOM.ProductionProcessDescription, "", new { @class = "text-danger" })

                        </div>


                        <div class="form-group">
                            @*@Html.LabelFor(model => Model.BOM.ShelfLife, htmlAttributes: new { @class = "control-label" })*@
                            <label>ShelfLife (Days) </label>
                            @Html.EditorFor(model => Model.PackagingBOM.ShelfLife, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.PackagingBOM.ShelfLife, "", new { @class = "text-danger" })

                        </div>

                        <div class="form-group">
                            @*@Html.LabelFor(model => Model.BOM.ShelfLife, htmlAttributes: new { @class = "control-label" })*@
                            <label>Batch Quantity</label>
                            @Html.EditorFor(model => Model.PackagingBOM.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => Model.PackagingBOM.Quantity, "", new { @class = "text-danger" })

                        </div>


                        @*<div id="pprice" class="form-group">
                                @Html.LabelFor(model => Model.BOM.TimeUnit, htmlAttributes: new { @class = "control-label" })

                                @Html.EditorFor(model => Model.BOM.TimeUnit, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => Model.BOM.TimeUnit, "", new { @class = "text-danger" })

                            </div>*@

                    </div>

                    <div class="box-footer">
                        <input type="submit" value="Create" id="CreateProduct" class="btn btn-primary" />
                        @Html.ActionLink("Back to List", "Index")
                    </div>





                </div>
            </div>

            <div class="col-md-6">

                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Main Ingredients</h3>
                    </div>

                    <div class="box-body">



                        <table id="selectedProducts" class="table table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 5%;">#</th>
                                    <th style="width: 35%;">Name</th>
                                    <th style="width: 25%;">Qty</th>
                                    <th style="width: 20%;">Unit</th>
                                    <th style="width: 20%;"></th>
                                </tr>
                            </thead>
                            <tbody>

                                <tr>

                                    <td id="SNo0">1</td>

                                    <td style="display:none;"><input type="hidden" name="PacSubitem.Index" value="0" /></td>
                                    <td style="display:none;"><input type="text" readonly class="form-control classBGcolor" name="PacSubitem[0].ProductId" id="idn0"></td>
                                    <td><input style="background-color: #f8f9fa;" type="text" autocomplete="off" class="form-control .bg-light" name="PacSubitem[0].Product.Name" id="name0" placeholder="Type product name" data-toggle="tooltip" data-placement="top" title="Type product name"></td>
                                    <td><input type="number" step="0.00001" min="0" autocomplete="off" class="form-control" name="PacSubitem[0].Quantity" id="quantity0"></td>
                                    <td>
                                        <input type="text" autocomplete="off" class="form-control" name="PacSubitem[0].Unit" id="unit0">
                                    </td>
                                    <td>
                                        <button type="button" id="delete0" class="delete btn btn-default add-new"><a class="delete" title="Delete" data-toggle="tooltip"><i class="material-icons">&#xE872;</i></a></button>
                                    </td>


                                </tr>

                            </tbody>

                        </table>


                        <div class="table-title">
                            <div class="row">
                                <div class="col-sm-3">
                                    <button type="button" id="addNewRow" class="btn btn-primary add-new" style="background-color: #2bbdb9;"><i class="fa fa-plus"></i> New Row</button>
                                </div>
                            </div>
                        </div>

                    </div>




                </div>

            </div>
            <div class="col-md-6">

                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Packaging</h3>
                    </div>

                    <div class="box-body">

                        <table id="selectedPackaging" class="table table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 5%;">#</th>
                                    <th style="width: 35%;">Name</th>
                                    <th style="width: 25%;">Color</th>
                                    <th style="width: 20%;">Qty</th>
                                    <th style="width: 20%;"></th>
                                </tr>
                            </thead>
                            <tbody>

                                <tr>

                                    <td id="PackagingSNo0">1</td>

                                    <td style="display:none;"><input type="hidden" name="PackagingColor.Index" value="0" /></td>
                                    <td style="display:none;">
                                        <input type="hidden" name="PackagingColor[0].ProductId" id="packagingidn0">
                                    </td>
                                    <td><input style="background-color: #f8f9fa;" type="text" autocomplete="off" class="form-control bg-light product-search" name="PackagingColor[0].Product.Name" id="packagingName0" placeholder="Type product name" data-toggle="tooltip" data-placement="top" title="Type product name"></td>
                                    @*<td><input style="background-color: #f8f9fa;" type="text" autocomplete="off" class="form-control .bg-light" name="PackagingColor[0].Color" id="packagingColor0" data-toggle="tooltip" data-placement="top" title="Type product name"></td>*@
                                <td>
                                    <input type="text"
                                           autocomplete="off"
                                           class="form-control bg-light color-search"
                                           name="PackagingColor[0].Color"
                                           id="packagingColor0"
                                           placeholder="Type color name"
                                           data-toggle="tooltip"
                                           title="Type color name">

                                    <input type="hidden" name="PackagingColor[0].ColorId" id="packagingColorId0" />
                                </td>


                                    <td><input type="number" step="0.00001" min="0" autocomplete="off" class="form-control" name="PackagingColor[0].Quantity" id="packagingQuantity0"></td>

                                    <td>
                                        <button type="button" id="delete0" class="delete btn btn-default add-new"><a class="delete" title="Delete" data-toggle="tooltip"><i class="material-icons">&#xE872;</i></a></button>
                                    </td>


                                </tr>

                            </tbody>

                        </table>


                        <div class="table-title">
                            <div class="row">
                                <div class="col-sm-3">
                                    <button type="button" id="addNewPackagingRow" class="btn btn-primary add-new" style="background-color: #2bbdb9;"><i class="fa fa-plus"></i> New Row</button>
                                </div>
                            </div>
                        </div>

                    </div>




                </div>

            </div>





        </div>

    </section>
}

<link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.css">
<script type="text/javascript" src="//code.jquery.com/jquery-1.9.1.js"></script>
<script type="text/javascript" src="//code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-sliderAccess.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.js"></script>



<link href="@Url.Content("~/Content/custom/custom.css")" rel="stylesheet" type="text/css" />
<script src="~/Content/custom/PackagingSubItem.js"></script>
<script src="~/Content/custom/downloads/jquery.mcautocomplete.js"></script>
<script src="~/Content/custom/downloads/jquery.scannerdetection.js"></script>



<script>

 var colorColumns = [
        { name: 'Id', minWidth: '50px' },
        { name: 'ColorName', minWidth: '200px' },
        { name: 'ColorCode', minWidth: '100px' }
    ];

    // Step 2: Array to hold color data
    var colors = new Array();

    // Step 3: Get color list from server using AJAX
    function fetchColorList() {
        $.ajax({
            url: '@Url.Action("GetColors", "PackagingBOM")',
            type: 'GET',
            success: function (data) {
                colors = data.map(item => [item.Id, item.ColorName, item.ColorCode]);
                console.log("Colors loaded:", colors);
            },
            error: function (xhr, status, error) {
                console.error("Failed to load colors:", status, error);
                console.log("Response:", xhr.responseText);
            }
        });
    }

    // Step 4: Function to apply autocomplete on a color input
    function OnColorName(param) {
        
        $(param).mcautocomplete({
            
            showHeader: true,
            columns: colorColumns,
            source: colors, // ✅ Now dynamically filled!
            select: function (event, ui) {
                this.value = ui.item ? ui.item[1] : ''; // ColorName
                $(param).closest('td').find('input[type="hidden"]').val(ui.item ? ui.item[0] : '');

                $('#colorcode').val(ui.item ? ui.item[2] : ''); // ColorCode
                return false;
            }
        });
    }


    // Step 5: Run everything on page load
    $(document).ready(function () {
        fetchColorList(); // load colors once

        $('#selectedPackaging').on('focus', 'input[id^="packagingColor"]', function () {
            OnColorName(this);
        });


    });
  $(document).ready(function () {
    document.getElementById('SOCreate').reset(); // has to be handle
  });
 $('#productDropdown').change(function () {
    var productId = $(this).val(); // Get selected product ID

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetProductUnit", "PackagingBOM")', // Corrected API method
            type: 'GET',
            data: { id: productId },
            success: function (data) {
                $('#unitField').val(data.unit);
                $('#unitHiddenField').val(data.unit);
                //$('#variableProductIdField').val(data.variableProductName); // Show Name instead of ID
                //$('#variableProductIdHiddenField').val(data.variableProductName);
            },
            error: function () {
              /*  alert('Failed to fetch product details.');*/
            }
        });
    } else {
        $('#unitField').val('');
        $('#unitHiddenField').val('');
        //$('#variableProductIdField').val('');
        //$('#variableProductIdHiddenField').val('');
    }
});


  @*$('#productDropdown').change(function () {
    var productId = $(this).val(); // Get selected product ID

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetProductUnit", "BOM")',
            type: 'GET',
            data: { id: productId },
            success: function (data) {
                $('#unitField').val(data.unit); // Update the visible unit field
                $('#unitHiddenField').val(data.unit); // Update the hidden unit field
            },
            error: function () {
                alert('Failed to fetch unit details.');
            }
        });
    } else {
        $('#unitField').val(''); // Clear the unit field if no product is selected
        $('#unitHiddenField').val(''); // Clear the hidden unit field
    }
});*@
    $(document).on('change', '.product-dropdown', function () {
    var productId = $(this).val(); // Get the selected product ID
    var dropdownId = $(this).attr('id'); // Get the ID of the current dropdown
    var index = dropdownId.replace('idn', ''); // Extract the index from the ID
    var unitFieldId = '#unit' + index; // Construct the ID for the unit field
    var hiddenUnitFieldId = '#unitHiddenField' + index; // Construct the ID for the hidden unit field

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetProductUnit", "BOM")',
            type: 'GET',
            data: { id: productId },
            success: function (data) {
                $(unitFieldId).val(data.unit); // Update the visible unit field
                $(hiddenUnitFieldId).val(data.unit); // Update the hidden unit field
            },
            error: function () {
              /*  alert('Failed to fetch unit details.');*/
            }
        });
    } else {
        $(unitFieldId).val(''); // Clear the unit field if no product is selected
        $(hiddenUnitFieldId).val(''); // Clear the hidden unit field
    }
});


        @*$('#productDropdown').change(function () {
            var productId = $(this).val(); // Get selected product ID
            alert('hi');
            if (productId) {
                $.ajax({
                    url: '@Url.Action("GetProductUnit", "BOM")',
                    type: 'GET',
                    data: { id: productId },
                    success: function (data) {
                        $('#unitField').val(data.unit); // Update the unit field
                    },
                    error: function () {
                        alert('Failed to fetch unit details.');
                    }
                });
            } else {
                $('#unitField').val(''); // Clear the unit field if no product selected
            }
        });*@

   @*$('#productDropdown').change(function () {
    var productId = $(this).val(); // Get the selected product ID

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetProductDetails", "BOM")',
            type: 'GET',
            data: { productId: productId },
            success: function (data) {
                if (data && data.length > 0) {
                    // Clear existing rows in the Production Output table
                    $('#selectedProduct tbody').empty();

                    // Loop through the product details and create rows
                    data.forEach((detail, index) => {
                        const newRow = `
                            <tr>
                                <td>${index + 1}</td>
                                <td style="display:none;">
                                    <input type="hidden" name="ProductTypeDetail.Index" value="${index}" />
                                </td>
                                <td>
                                    <input type="text" readonly class="form-control" name="ProductTypeDetail[${index}].Shape" value="${detail.Shape}" />
                                </td>
                                <td>
                                    <input type="text" class="form-control" name="ProductTypeDetail[${index}].ProductionQty" />
                                </td>
                            </tr>`;
                        $('#selectedProduct tbody').append(newRow); // Append only to Production Output table
                    });
                } else {
                    // Clear the table if no data is found
                    $('#selectedProduct tbody').empty();
                    alert('No product details found.');
                }
            },
            error: function () {
                alert('Failed to fetch product details.');
            }
        });
    } else {
        // Clear the table if no product is selected
        $('#selectedProduct tbody').empty();
    }
});*@



    @*$('#productDropdown').change(function () {
    var productId = $(this).val(); // Get the selected product ID

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetProductDetails", "BOM")',
            type: 'GET',
            data: { productId: productId },
            success: function (data) {
                if (data && data.length > 0) {
                    // Clear existing rows in the Production Output table
                    $('#selectedProduct tbody').empty();

                    // Loop through the product details and create rows
                    data.forEach((detail, index) => {
                        const newRow = `
                            <tr>
                                <td>${index + 1}</td>
                                <td style="display:none;">
                                    <input type="hidden" name="ProductDetail.Index" value="${index}" />
                                </td>
                                <td>
                                    <input type="text" readonly class="form-control" name="ProductDetail[${index}].Shape" value="${detail.Shape}" />
                                </td>
                                <td>
                                    <input type="text" class="form-control" name="" />
                                </td>

                            </tr>`;
                        $('#selectedProduct tbody').append(newRow);  // Append only to Production Output table
                    });
                } else {
                    // Clear the table if no data is found
                    $('#selectedProduct tbody').empty();
                    alert('No product details found.');
                }
            },
            error: function () {
                alert('Failed to fetch product details.');
            }
        });
    } else {
        // Clear the table if no product is selected
        $('#selectedProduct tbody').empty();
    }
});*@





  @*$('#productDropdown').change(function () {
    var productId = $(this).val(); // Get selected product ID

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetProductDetails", "BOM")',
            type: 'GET',
            data: { productId: productId },
            success: function (data) {
                if (data && data.length > 0) {
                    // Populate Shape and Weight fields
                    $('#shape0').val(data[0].Shape);
                    $('#weight0').val(data[0].Weight);
                } else {
                    // Clear fields if no data found
                    $('#shape0').val('');
                    $('#weight0').val('');
                }
            },
            error: function () {
                alert('Failed to fetch product details.');
            }
        });
    } else {
        // Clear fields if no product selected
        $('#shape0').val('');
        $('#weight0').val('');
    }
});*@





    txtSerialNum = 0;
    TriggerBodyEvents();

    var getPrevBalanceUrl = '@Url.Action("GetPreviousBalancepenDialogue('#name0');


    @{
        var carton = 0; //= (d.Stock / d.PerPack);
        var piece = 0;
        foreach (var d in Model.Products)
        {
            carton = (int)(d.Stock / d.PerPack);
            piece = (int)(d.Stock % d.PerPack);
            if (piece == 0)
            {
               @:products.push([ "@d.Id", "@d.Name",  "@d.Unit", "@d.Unit",  "@carton" ]);
            }
            else
            {
                @:products.push(["@d.Id", "@d.Name",  "@d.Unit",  "@d.Unit",  "@carton,@piece"]);
            }
            @:productsBarcodes.push(["@d.Id", "@d.BarCode"]);

        }
     }


        IsReturn = '@(ViewBag.IsReturn)';


        $('.from-date-picker').datetimepicker({
            dateFormat: "dd-M-yy",
            timeFormat: "hh:mm tt",
            showOn: "both",
            timeInput: true,
            stepHour: 1,
            stepMinute: 5,
            oneLine: true,
            //changeMonth: true,
            //changeYear: true,
            controlType: 'select',
            buttonImageOnly: true,
            buttonImage: "http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",
            buttonText: "Select date"
        });




         $("#NewData").dialog({
            autoOpen: false,
             title: 'Should not sell-out, already rented on thses dates',
            closeText: '', //Changes the text of the titlebar-close button to hello instead of default Close
            width: 500,
            Height:500

        });

        function FetchProductRentStatus() {
        //alert('wwww');

            var date = new Date();
            var day = date.getDate();       // yields date
            var month = date.getMonth() + 1;    // yields month (add one as '.getMonth()' is zero indexed)
            var year = date.getFullYear();  // yields year
            var hour = date.getHours();     // yields hours
            var minute = date.getMinutes(); // yields minutes
            var second = date.getSeconds(); // yields seconds

            // After this construct a string with the above results as below
            var sellDate = day + "/" + month + "/" + year;// + " " + hour + ':' + minute + ':' + second;

            var prodId = $('#idn' + clickedIdNum).val();




            $.ajax({
                url: "@Url.Action("ProductRentStatus","SOSR")",
                data: { 'prodId': prodId, 'sellDate': sellDate},
                type: "GET",
                cache: false,
                success: function (data) {
                    //toastr.success('Hi! I am success message.');
                    //var abc = data;
                    //alert(data);
                    if (data.indexOf('12:00:00 AM') != -1) {

                        $("#NewData").html(data);
                        $("#NewData").dialog("open");
                    //}
                    }


                },
                error: function (xhr, ajaxOptions, thrownError) {
                    //$('#lblCommentsNotification').text("Error encountered while saving the comments.");
                   /* alert('Data provided was not valid');*/
                }
            });
        }

        //alert(IsReturn);

        $('#isService').on('change', function () {
            if (this.value == 'true')
            //.....................^.......
            {
                $("#pprice").hide();
                $("#stk").hide();
            }
            else {
                $("#pprice").show();
                $("#stk").show();
            }
        });



</script>


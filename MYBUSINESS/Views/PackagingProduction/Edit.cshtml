@model MYBUSINESS.Models.PackagingProductionViewModel

@{
    ViewBag.Title = "Update PaperProduction";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.css">
<script type="text/javascript" src="//code.jquery.com/jquery-1.9.1.js"></script>
<script type="text/javascript" src="//code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-sliderAccess.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.js"></script>



<link href="@Url.Content("~/Content/custom/custom.css")" rel="stylesheet" type="text/css" />
<script src="~/Content/custom/Packagingproduction.js"></script>
<script src="~/Content/custom/downloads/jquery.mcautocomplete.js"></script>
<script src="~/Content/custom/downloads/jquery.scannerdetection.js"></script>
@{
    bool isReadonly = ViewBag.ReadonlyMode ?? false;
}
@using (Html.BeginForm("Edit", "PackagingProduction", FormMethod.Post, new { id = "packagingProductionForm" }))
{


    @Html.AntiForgeryToken()

    <section class="content">
        <div class="row">
            <!-- left column -->
            <div class="col-md-6">
                <!-- general form elements -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Update PackagingProduction</h3>
                    </div>


                    <div class="box-body">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @*@Html.HiddenFor(model => model.Id)*@


                        <div class="form-group">
                            @Html.LabelFor(model => Model.PackagingProduction.Id, htmlAttributes: new { @class = "control-label" })

                            @*@Html.EditorFor(model => Model.NewProduction.Id, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })*@
                            @Html.EditorFor(model => model.PackagingProduction.Id, new { htmlAttributes = new { @class = "form-control", @readonly = isReadonly ? "readonly" : null } })

                            @Html.ValidationMessageFor(model => Model.PackagingProduction.Id, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => Model.PackagingProduction.ProductId, "Select Product", new { @class = "control-label" })
                            @Html.DropDownListFor(
                                model => model.PackagingProduction.ProductId,
                                (SelectList)ViewBag.ProductList,
                                "Select a Product",
                                new { @class = "form-control product-dropdown", @id = "productDropdown", @readonly = isReadonly ? "readonly" : null }

                            )
                            @Html.HiddenFor(model => model.PackagingProduction.ProductId) <!-- Hidden field to send ProductId -->
                            @Html.ValidationMessageFor(model => model.PackagingProduction.ProductId, "", new { @class = "text-danger" })
                        </div>






                        <div class="form-group">
                            @Html.LabelFor(model => model.PackagingProduction.PProdDate, htmlAttributes: new { @class = "control-label" })
                            @{
                                var attributes = new Dictionary<string, object>
                                                                                                                    {
        { "class", "form-control" },
        { "type", "date" }
    };

                                if (isReadonly)
                                {
                                    attributes.Add("readonly", "readonly");
                                }
                            }

                            @Html.TextBoxFor(model => model.PackagingProduction.PProdDate, attributes)

                            @Html.ValidationMessageFor(model => model.PackagingProduction.PProdDate, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.PackagingProduction.Box, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.PackagingProduction.Box, new { htmlAttributes = new { @class = "form-control", type = "text" } })
                            @Html.ValidationMessageFor(model => model.PackagingProduction.Box, "", new { @class = "text-danger" })
                        </div>












                    </div>


                    <div class="box-footer">
                        @*<input type="submit" id="CreateSO" value="Update" class="btn btn-primary"  @(isReadonly ? "readonly='readonly'" : "")/>
                            @Html.ActionLink("Back to List", "Index")
                            <button id="validateBtn" class="btn btn-primary" style="margin-left:280px;"  @(isReadonly ? "readonly='readonly'" : "")>Validate</button>*@
                        <input type="submit" id="CreateSO" value="Update" class="btn btn-primary" @(isReadonly ? "disabled='disabled'" : "") />

                        @Html.ActionLink("Back to List", "Index")

                        @*<button id="validateBtn" class="btn btn-primary" style="margin-left:280px;" @(isReadonly ? "disabled='disabled'" : "")>Validate</button>*@

                    </div>





                </div>
            </div>
            <div class="col-md-6">
                <!-- general form elements -->
                <!-- general form elements -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Paper Color</h3>
                    </div>


                    <div class="box-body">



                        <table id="selectedProducts" class="table table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 5%;">#</th>
                                    <th style="width: 50%;">Color</th>
                                    <th style="width: 20%;">Qty</th>
                                    <th style="width: 12%;"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.PaperColor != null && Model.PaperColor.Count > 0)
                                {
                                    int sNo = 0;
                                    foreach (var item in Model.PaperColor)
                                    {
                                        <tr>
                                            <td id="SNo@(sNo)">@(sNo + 1)</td>
                                            <td style="display:none;">
                                                <input type="hidden" name="PaperColor.Index" value="@sNo" />
                                            </td>
                                            <td style="display:none;">
                                                <input type="text" value="@item.ProductId" readonly class="form-control classBGcolor"
                                                       name="PaperColor[@sNo].ProductId" id="idn@(sNo)">
                                            </td>
                                            <td>
                                                <input type="text" autocomplete="off" value="@(item.Color)" class="form-control"
                                                       name="PaperColor[@sNo].Color" id="color@(sNo)" placeholder="Type shape"
                                                       data-toggle="tooltip" data-placement="top" title="Type shape">
                                            </td>
                                            <td>
                                                <input type="number" step="any" autocomplete="off" value="@(item.Quantity)" class="form-control"
                                                       name="PaperColor[@sNo].Quantity" id="quantity@(sNo)" placeholder="Type weight"
                                                       data-toggle="tooltip" data-placement="top">
                                            </td>
                                            <td>

                                                <button type="button" id="delete@(sNo)" class="delete btn btn-default add-new"><a class="delete" title="Delete" data-toggle="tooltip"><i class="material-icons">&#xE872;</i></a></button>
                                            </td>

                                        </tr>
                                        sNo += 1;
                                    }
                                }
                            </tbody>
                        </table>



                       

                    </div>




                </div>
            </div>


        </div>
    </section>

}



<script>

       $(document).ready(function () {
    document.getElementById('SOCreate').reset(); // has to be handle
  });

    txtSerialNum = 0;
    TriggerBodyEvents();



    @{
        var carton = 0; //= (d.Stock / d.PerPack);
        var piece = 0;
        foreach (var d in Model.Products)
        {
            carton = (int)(d.Stock / d.PerPack);
            piece = (int)(d.Stock % d.PerPack);
           if (piece == 0)
 {
    @:products.push([ "@d.Id", "@d.Name", "@d.Unit", "@d.Unit", "@carton" ]);
 }
 else
 {
     @:products.push(["@d.Id", "@d.Name", "@d.SalePrice", "@carton,@piece"]);
 }
 @:productsBarcodes.push(["@d.Id", "@d.BarCode"]);

        }
     }

     var i;
     var sodCount = "@Model.SubItems.Count()";
     for (i = 0; i < sodCount; i++)
     {

         txtSerialNum = i;
         OnTypeName('#name' + i);
         TriggerBodyEvents();
     }



        $('.from-date-picker').datetimepicker({
            dateFormat: "dd-M-yy",
            timeFormat: "hh:mm tt",
            showOn: "both",
            timeInput: true,
            stepHour: 1,
            stepMinute: 5,
            oneLine: true,
            //changeMonth: true,
            //changeYear: true,
            controlType: 'select',
            buttonImageOnly: true,
            buttonImage: "http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",
            buttonText: "Select date"
        });




         $("#NewData").dialog({
            autoOpen: false,
             title: 'Should not sell-out, already rented on thses dates',
            closeText: '', //Changes the text of the titlebar-close button to hello instead of default Close
            width: 500,
            Height:500

        });

        function FetchProductRentStatus() {
        //alert('wwww');

            var date = new Date();
            var day = date.getDate();       // yields date
            var month = date.getMonth() + 1;    // yields month (add one as '.getMonth()' is zero indexed)
            var year = date.getFullYear();  // yields year
            var hour = date.getHours();     // yields hours
            var minute = date.getMinutes(); // yields minutes
            var second = date.getSeconds(); // yields seconds

            // After this construct a string with the above results as below
            var sellDate = day + "/" + month + "/" + year;// + " " + hour + ':' + minute + ':' + second;

            var prodId = $('#idn' + clickedIdNum).val();




            $.ajax({
                url: "@Url.Action("ProductRentStatus","SOSR")",
                data: { 'prodId': prodId, 'sellDate': sellDate},
                type: "GET",
                cache: false,
                success: function (data) {
                    //toastr.success('Hi! I am success message.');
                    //var abc = data;
                    //alert(data);
                    if (data.indexOf('12:00:00 AM') != -1) {

                        $("#NewData").html(data);
                        $("#NewData").dialog("open");
                    //}
                    }


                },
                error: function (xhr, ajaxOptions, thrownError) {
                    //$('#lblCommentsNotification').text("Error encountered while saving the comments.");
                    alert('Data provided was not valid');
                }
            });
        }

        //alert(IsReturn);

        $('#isService').on('change', function () {
            if (this.value == 'true')
            //.....................^.......
            {
                $("#pprice").hide();
                $("#stk").hide();
            }
            else {
                $("#pprice").show();
                $("#stk").show();
            }
        });

</script>
@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@

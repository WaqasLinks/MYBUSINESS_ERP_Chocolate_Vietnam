@model MYBUSINESS.Models.PostProductionViewModel

@{
    ViewBag.Title = "Update NewProduction";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.css">
<script type="text/javascript" src="//code.jquery.com/jquery-1.9.1.js"></script>
<script type="text/javascript" src="//code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-sliderAccess.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.js"></script>



<link href="@Url.Content("~/Content/custom/custom1.css")" rel="stylesheet" type="text/css" />
<script src="~/Content/custom/newProduction.js"></script>
<script src="~/Content/custom/downloads/jquery.mcautocomplete.js"></script>
<script src="~/Content/custom/downloads/jquery.scannerdetection.js"></script>
@{
    bool isReadonly = ViewBag.ReadonlyMode ?? false;
}
@using (Html.BeginForm("Edit", "PostProduction", FormMethod.Post, new { id = "postProductionForm" }))
{
    @Html.AntiForgeryToken()
    <section class="content">
        <div class="row">
            <!-- left column -->
            <div class="col-md-6">
                <!-- general form elements -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Update PostProduction</h3>
                    </div>


                    <div class="box-body">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        
                        <div class="form-group">
                            @Html.LabelFor(model => Model.PostProduction.Id, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => Model.PostProduction.Id, new { htmlAttributes = new { @class = "form-control", @readonly = isReadonly ? "readonly" : null } })
                            @Html.ValidationMessageFor(model => Model.PostProduction.Id, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group" style="display:none;">
                            @Html.LabelFor(model => model.PostProduction.ProductionId, "Linked Production ID", new { @class = "control-label" })
                            @Html.EditorFor(model => model.PostProduction.ProductionId,
                                new
                                    {
                                        htmlAttributes = new
                                        {
                                        @class = "form-control",
                                        @Value = Model.PostProduction.ProductionId,
                                        @readonly = "readonly"
                                    }
                                })
                            @Html.ValidationMessageFor(model => model.PostProduction.ProductionId, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.PostProduction.ProductionId) <!-- Hidden field as backup -->
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.PostProduction.ProductId, "Select Product", new { @class = "control-label" })
                            @Html.DropDownListFor(
                                model => model.PostProduction.ProductId,
                                (SelectList)ViewBag.ProductList,
                                "Select a Product",
                                new { @class = "form-control product-dropdown", @id = "productDropdown", @disabled = "disabled" }
                            )
                            @Html.HiddenFor(model => model.PostProduction.ProductId) <!-- Hidden field to send ProductId -->
                            @Html.ValidationMessageFor(model => model.PostProduction.ProductId, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.Label("Unit", new { @class = "control-label" })
                            <input type="text" id="unitField" class="form-control" readonly placeholder="Unit will be displayed here"
                                   value="@Model.PostProduction.Unit" />
                            @Html.HiddenFor(model => model.PostProduction.Unit, new { @id = "unitHiddenField" })
                            @Html.ValidationMessageFor(model => model.PostProduction.Unit, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => Model.PostProduction.ProductionDate, htmlAttributes: new { @class = "control-label" })
                            @{
                                var attributes = new Dictionary<string, object>
                                {
    { "class", "form-control" },
    { "type", "date" }
};
                                if (isReadonly)
                                {
                                    attributes.Add("readonly", "readonly");
                                }
                            }
                            @Html.TextBoxFor(model => model.PostProduction.ProductionDate, "{0:yyyy-MM-dd}", attributes)
                            @Html.ValidationMessageFor(model => model.PostProduction.ProductionDate, "", new { @class = "text-danger" })
                        </div>


                        <div class="box box-primary">
                            <div class="box-header with-border">
                                <h3 class="box-title">Production Output</h3>
                            </div>


                            <div class="box-body">


                                <table id="selectedProduct" class="table table-bordered">
                                    <thead>
                                        <tr>                                            
                                            <th style="width: 5%;">#</th>
                                            <th style="width: 50%;">Shape</th>
                                            @*<th style="width: 12%;">Qty</th>*@
                                            <th style="width: 20%;">Request Qty</th>
                                            <th style="width: 20%;">Actual Qty</th>
                                            @*<th style="width: 12%;"></th>*@
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            if (Model.QuantityToProduce != null && Model.QuantityToProduce.Count > 0)
                                            {
                                                int sNo = 0; // Start index
                                                foreach (var item in Model.QuantityToProduce)
                                                {
                                                                                <tr>
                                                                                    <td id="Pr@(sNo)">@(sNo + 1)</td>
                                                                                    <td style="display:none;">
                                                                                        <input type="hidden" name="ProductTypeDetail.Index" value="@sNo" />
                                                                                    </td>
                                                                                    <td style="display:none;">
                                                                                        <input type="text" value="@item.ProductId" readonly class="form-control classBGcolor"
                                                                                               name="QuantityToProduce[@sNo].ProductId" id="idn@(sNo)" @(isReadonly ? "readonly='readonly'" : "")>
                                                                                    </td>
                                                                                    <td style="display:none;">
                                                                                        <input type="text" value="@item.ProductDetailId" readonly class="form-control classBGcolor"
                                                                                               name="QuantityToProduce[@sNo].ProductDetailId" id="productdetailId@(sNo)" @(isReadonly ? "readonly='readonly'" : "")>
                                                                                    </td>
                                                                                    <td>
                                                                                        <input readonly type="text" autocomplete="off" value="@item.Shape" class="form-control"
                                                                                               name="QuantityToProduce[@sNo].Shape" id="shape@(sNo)" placeholder="Type shape"
                                                                                               data-toggle="tooltip" data-placement="top" title="Type shape" @(isReadonly ? "readonly='readonly'" : "")>
                                                                                    </td>
                                                                                    <td style="display:none;">
                                                                                        <input readonly type="text" autocomplete="off" value="@item.Weight" class="form-control"
                                                                                               name="QuantityToProduce[@sNo].Weight" id="weight@(sNo)" placeholder="Type shape"
                                                                                               data-toggle="tooltip" data-placement="top" title="Type shape" @(isReadonly ? "readonly='readonly'" : "")>
                                                                                    </td>
                                                                                    <td>
                                                                                        <input readonly type="text" autocomplete="off" value="@item.ProductionQty"
                                                                                               class="form-control production-qty"
                                                                                               name="QuantityToProduce[@sNo].ProductionQty" id="productionqty@(sNo)"
                                                                                               data-weight="@item.CalculatedWeight@*ProductDetail?.Weight ?? 0*@" @(isReadonly ? "readonly='readonly'" : "")>
                                                                                    </td>


                                                                                    <td>
                                                                                        <input type="text" autocomplete="off" @*value="@item.CalculatedWeight"*@ value="@item.CalculatedWeight"
                                                                                               class="form-control calculated-weight"
                                                                                               name="QuantityToProduce[@sNo].CalculatedWeight" id="calculatedWeight@(sNo)"
                                                                                               placeholder=""
                                                                                               data-toggle="tooltip" data-placement="top" title="Calculated weight" @(isReadonly ? "readonly='readonly'" : "")>
                                                                                    </td>

                                                                                </tr>
                                                    sNo++; // Increment index
                                                }
                                            }
                                        }

                                    </tbody>

                                </table>

                            </div>

                        </div>
                        <div class="total-weight-container">
                            <p><strong>Total Weight: </strong><span id="totalWeightDisplay">@Model.TotalWeight.ToString("0.00")</span></p>
                        </div>

                    </div>


                    <div class="box-footer">
                        @*<input type="submit" id="CreateSO" value="Update" class="btn btn-primary"  @(isReadonly ? "readonly='readonly'" : "")/>
        @Html.ActionLink("Back to List", "Index")
        <button id="validateBtn" class="btn btn-primary" style="margin-left:280px;"  @(isReadonly ? "readonly='readonly'" : "")>Validate</button>*@
                        <input type="submit" id="CreateSO" value="Update" class="btn btn-primary" @(isReadonly ? "disabled='disabled'" : "") />

                        @Html.ActionLink("Back to List", "Index")

                        @*<button id="validateBtn" class="btn btn-primary" style="margin-left:280px;" @(isReadonly ? "disabled='disabled'" : "")>Validate</button>*@
                        <button id="validateBtn" class="btn btn-primary" style="margin-left:250px;" @(isReadonly ? "disabled='disabled'" : "")>Validate</button>

                    </div>




                </div>
            </div>
            
            <div class="col-md-6">
                <!-- general form elements -->
                <!-- general form elements -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Secondary Materials</h3>
                    </div>


                    <div class="box-body">



                        <table id="productTypeTable" class="table table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 5%;">#</th>
                                    <th style="width: 20%;">Name</th>
                                    <th style="width: 20%;">Qty</th>
                                    <th style="width: 10%;">Unit</th>
                                    <th style="width: 15%;">P.Type</th>
                                   
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.SubItemProduction != null && Model.SubItemProduction.Count > 0)
                                {
                                    int sNo = 0;
                                    foreach (var item in Model.SubItemProduction)
                                    {
                                        
                                        if ((item.Product.PType == 6  || item.Product.PType == 3) &&
                item.SubItemQty == null)
                                        {
                                            <tr>
                                                <td id="SNo0">@(sNo + 1)</td>
                                                <td style="display:none;"><input type="hidden" readonly name="SubItemProduction.Index" value="@sNo" /></td>
                                                <td style="display:none;"> <input type="hidden" name="SubItemProduction[@sNo].Id" value="@item.Id" /></td>
                                                <td style="display:none;"><input type="text" readonly value=@item.ParentProductId readonly class="form-control classBGcolor" name="SubItemProduction[@sNo].ParentProductId" id="idn@(sNo)" @(isReadonly ? "readonly='readonly'" : "")></td>
                                                <td><input type="text" readonly autocomplete="off" value="@(item.Product.Name)" class="form-control" name="SubItemProduction[@sNo].Product.Name" id="name@(sNo)" placeholder="Type product name" data-toggle="tooltip" data-placement="top" title="Type product name" @(isReadonly ? "readonly='readonly'" : "")></td>
                                                <td style="display:none;"><input type="text" readonly autocomplete="off" value="@(item.Product.Id)" class="form-control" name="SubItemProduction[@sNo].ProductId" id="id@(sNo)" placeholder="Type product name" data-toggle="tooltip" data-placement="top" title="Type product name" @(isReadonly ? "readonly='readonly'" : "")></td>
                                                <td>
                                                    <input type="text" autocomplete="off"
                                                           @*value="@item.Quantity"*@
                                                           value="@item.Quantity"
                                                           class="form-control production-qty1"
                                                           name="SubItemProduction[@sNo].Quantity"
                                                           id="quantity@(sNo)"
                                                           @(isReadonly || item.Product.PType == 9 ? "readonly='readonly'" : "")>
                                                </td>
                                                <td><input type="text" readonly autocomplete="off" value=@item.Unit class="form-control" name="SubItemProduction[@sNo].Unit" id="unit@(sNo)" @(isReadonly ? "readonly='readonly'" : "")></td>
                                                @*<td><input type="text" readonly autocomplete="off" value=@item.Product.PType class="form-control" name="SubItemProduction[@sNo].Product.PType" id="ptype@(sNo)"></td>*@
                                                <td>
                                                    <input type="text" readonly autocomplete="off"
                                                           value="@(item.Product.PType == 1 ? "Variable" :
item.Product.PType == 6 ? "IntermediaryProduct" :
item.Product.PType == 3 ? "ByProduct" : "Unknown")"
                                                           class="form-control"
                                                           name="SubItemProduction[@sNo].Product.PType"
                                                           id="ptype@(sNo)"
                                                           @(isReadonly ? "readonly='readonly'" : "")>
                                                </td>
                                               
                                            </tr>
                                        }
                                        sNo += 1;
                                    }


                                }
                            </tbody>

                        </table>


                        @*<div class="table-title">
                                <div class="row">
                                    <div class="col-sm-3">
                                        <button type="button" id="addNewRow" class="btn btn-primary add-new" style="background-color: #2bbdb9;"><i class="fa fa-plus"></i> New Row</button>
                                    </div>
                                </div>
                            </div>*@

                    </div>




                </div>
            </div>
            <div class="col-md-6">
                <!-- general form elements -->
                <!-- general form elements -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <h3 class="box-title">Note</h3>
                    </div>


                    <div class="box-body">



                        <div class="form-group">
                            @*<label for="Note" class="font-weight-bold">Note</label>*@
                            @Html.TextAreaFor(model => model.PostProduction.Note, new
                            {
                                @class = "form-control",
                                id = "Note",
                                rows = "5",
                                placeholder = "Enter your note here...",
                                @readonly = isReadonly ? "readonly" : null
                            })
                        </div>




                        @*<div class="table-title">
            <div class="row">
                <div class="col-sm-3">
                    <button type="button" id="addNewRow" class="btn btn-primary add-new" style="background-color: #2bbdb9;"><i class="fa fa-plus"></i> New Row</button>
                </div>
            </div>
        </div>*@

                    </div>




                </div>
            </div>

        </div>
    </section>

}



<script>

       $(document).ready(function () {
    document.getElementById('SOCreate').reset(); // has to be handle
  });
  $('#productDropdown').change(function () {
    var productId = $(this).val(); // Get selected product ID

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetProductUnit", "BOM")',
            type: 'GET',
            data: { id: productId },
            success: function (data) {
                $('#unitField').val(data.unit); // Update the visible unit field
                $('#unitHiddenField').val(data.unit); // Update the hidden unit field
            },
            error: function () {
            /*    alert('Failed to fetch unit details.');*/
            }
        });
    } else {
        $('#unitField').val(''); // Clear the unit field if no product is selected
        $('#unitHiddenField').val(''); // Clear the hidden unit field
    }
});
    $(document).on('input', '.calculated-weight', function () {
        calculateTotalWeightBasedOnWeight();
    });

    // New function that multiplies CalculatedWeight × Weight for all rows
    function calculateTotalWeightBasedOnWeight() {
        let total = 0;
        $('#selectedProduct > tbody > tr').each(function () {
            let calculatedWeight = parseFloat($(this).find('.calculated-weight').val()) || 0;
            let weight = parseFloat($(this).find("[name$='Weight']").val()) || 0;

            total += calculatedWeight * weight;
        });

        $('#totalWeightDisplay').text(total.toFixed(2));
    }




    // Trigger when the product dropdown changes
$('#productDropdown').change(function () {
    var productId = $(this).val(); // Get the selected product ID

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetProductDetails", "BOM")',
            type: 'GET',
            data: { productId: productId },
            success: function (data) {
                if (data && data.length > 0) {
                    // Clear existing rows in the Production Output table
                    $('#selectedProduct tbody').empty();

                    // Loop through the product details and create rows
                    data.forEach((detail, index) => {
                        const newRow = `
                        <tr>
                            <td>${index + 1}</td>
                            <td style="display:none;">
                                <input type="hidden" name="QuantityToProduce.Index" value="${index}" />
                            </td>
                            <td>
                                <input type="text" readonly class="form-control" name="QuantityToProduce[${index}].Shape" value="${detail.Shape}" />
                            </td>
                            <td>
                                <input type="text" class="form-control production-qty" data-weight="${detail.Weight}" name="QuantityToProduce[${index}].ProductionQty" />
                            </td>
                            <td>
                                <input type="text" readonly class="form-control calculated-weight" name="QuantityToProduce[${index}].CalculatedWeight" />
                            </td>
                        </tr>`;
                        $('#selectedProduct tbody').append(newRow); // Append rows
                    });
                } else {
                    $('#selectedProduct tbody').empty();
                    /*alert('No product details found.');*/
                }
            },
            error: function () {
                /*alert('Failed to fetch product details.');*/
            }
        });
    } else {
        $('#selectedProduct tbody').empty();
    }
});
     $(document).on('input', '.production-qty1', function () {
        let $row = $(this).closest('tr');
        let newProductionQty = parseFloat($(this).val()) || 0;
        let weightPerUnit = parseFloat($(this).data('weight')) || 5;
        let variableProductId = $(this).attr('data-variable-product-id'); // Ensure it's correctly retrieved
        let variableConsumptionRate = parseFloat($(this).data('consumption-rate')) || 1;

        console.log(variableProductId, "Variable Product ID from Input Field"); // Debugging log

        // Get the previous weight stored in the row
        let previousWeight = parseFloat($row.find('.calculated-weight').data('previous-weight')) || 0;

        // Calculate new weight for the row
        let newWeight = newProductionQty * weightPerUnit;

        // Update the field with new weight and store it as previous weight for next time
        $row.find('.calculated-weight').val(newWeight.toFixed(2)).data('previous-weight', newWeight);

        // Update the total weight dynamically
        //updateTotalWeight(newWeight, previousWeight);

        // ✅ Update only the rows that match variableProductId
        $('#selectedProducts > tbody > tr').each(function () {
            let variableProdId = $(this).find("input[name$='ProductId']").val();
            if (variableProdId) {
                variableProdId = variableProdId.toString().trim();  // Ensure it's a clean string
            }
            if (variableProductId) {
                variableProductId = variableProductId.toString().trim();
            }

            console.log(`Checking: ${variableProdId} == ${variableProductId}`);

            // ✅ Convert to string for accurate comparison
            if (variableProdId && variableProductId && variableProdId === variableProductId) {
                const quantity = parseFloat($(this).find("[name$='Quantity']").val()) || 0;
                console.log(quantity, 'quantity');
                // Get total weight (Make sure gtotalWeight is updated before use)
                let totalWeight = parseFloat($('#gtotalWeight').text()) || 0;
                console.log(totalWeight, 'totalWeight');
                // Calculate new result
                const calculatedValue = quantity * totalWeight;
                const result = gtotalWeight - newProductionQty;

                // Update only matching row
                $(this).find('.calculated-subitem').text(result.toFixed(2));
                console.log(`✅ Updated row with ProductId: ${variableProductId}, New Result: ${result}`);
            }
        });
    });


    // ✅ Unified function to update total weight correctly
    // Unified function to update total weight correctly
    function updateTotalWeight(newWeight, previousWeight) {
        let totalWeight = parseFloat($('#totalWeightDisplay').data('total-weight')) || 0;

        // Update the total weight properly: subtract previous weight and add the new one
        totalWeight = totalWeight - previousWeight + newWeight;

        // Update total weight display and store the updated value
        $('#totalWeightDisplay').text(totalWeight.toFixed(2)).data('total-weight', totalWeight);

        // Update sub-items dynamically based on new total weight
        updateSubItemCalculations(totalWeight);
    }


    // ✅ Function to update sub-items based on the total weight
    function updateSubItemCalculations(totalWeight) {
        $('#selectedProducts > tbody  > tr').each(function () {
            let quantity = parseFloat($(this).find("[name$='Quantity']").val()) || 0;

            let calculatedValue = quantity * totalWeight;
            $(this).find('.calculated-subitem').text(calculatedValue.toFixed(2));
        });
    }

    // ✅ Unified handler for `.production-qty`
    $(document).on('input', '.production-qty', function () {
        let $row = $(this).closest('tr');
        let newProductionQty = parseFloat($(this).val()) || 0;
        let weightPerUnit = parseFloat($(this).data('weight')) || 0;
        let variableProductId = $(this).data('variable-product-id');
        let variableConsumptionRate = parseFloat($(this).data('consumption-rate')) || 1;

        // Get previous weight and store before updating
        let previousWeight = parseFloat($row.find('.calculated-weight').data('previous-weight')) || 0;

        // Calculate new weight for the row
        let newWeight = newProductionQty * weightPerUnit;

        // Update the field with new weight and store previous weight
        $row.find('.calculated-weight').val(newWeight.toFixed(2)).data('previous-weight', newWeight);

        // Update the total weight
        updateTotalWeight(newWeight, previousWeight);

        // Update the corresponding Variable Product row
        $('#productTypeTable > tbody > tr').each(function () {
            let rowProductId = $(this).find("[name$='Product.Id']").val();
            if (rowProductId == variableProductId) {
                let newVariableProductQty = newProductionQty * variableConsumptionRate;
                $(this).find('.calculated-subitem').text(newVariableProductQty.toFixed(2));
            }
        });
    });


// Calculate the calculated weight on production quantity input
    $(document).on('input', '.production-qty', function () {
        const productionQty = parseFloat($(this).val()) || 0;
        const weight = parseFloat($(this).data('weight')) || 0;
        const variableProductId = $(this).data('variable-product-id'); // Get Variable Product ID
        const variableConsumptionRate = parseFloat($(this).data('consumption-rate')) || 1; // Get consumption rate per unit

        // Alert to check input values
        /*alert(`Production Qty Changed: ${productionQty}, Weight: ${weight}, Variable Product ID: ${variableProductId}, Consumption Rate: ${variableConsumptionRate}`);*/

        // Calculate the weight and update the corresponding field
        const calculatedWeight = productionQty * weight;
        $(this).closest('tr').find('.calculated-weight').val(calculatedWeight.toFixed(2));

        // Recalculate the total weight
        calculateTotalWeight();

        // Update the corresponding Variable Product row
        $('#productTypeTable > tbody > tr').each(function () {
            let rowProductId = $(this).find("[name$='Product.Id']").val(); // Find Product ID in the row

            if (rowProductId == variableProductId) {
                let newVariableProductQty = productionQty * variableConsumptionRate;
                /*alert(`Updating Variable Product ID ${variableProductId}: New Quantity = ${newVariableProductQty}`);*/
                $(this).find('.calculated-subitem').text(newVariableProductQty.toFixed(2)); // Update quantity
            }
        });
    });

    let gtotalWeight = 0;

    // Function to calculate the total weight
    function calculateTotalWeight() {
        let totalWeight = 0;

        // Sum up all the calculated weights
        $('.calculated-weight').each(function () {
            const weight = parseFloat($(this).val()) || 0;
            totalWeight += weight;
        });

        // Update global total weight
        gtotalWeight = totalWeight;

        // Display the total weight
        $('#totalWeightDisplay').text(totalWeight.toFixed(2));

        // Alert to check updated total weight
        /*alert(`Total Weight Updated: ${gtotalWeight}`);*/

        // Update the sub-items with the total weight multiplied by quantity
        updateSubItemCalculations();
    }

    // Function to update sub-item calculations
    function updateSubItemCalculations() {
        $('#selectedProducts > tbody  > tr').each(function () {
            const quantity = parseFloat($(this).find("[name$='Quantity']").val()) || 0; // Get quantity value
            const calculatedValue = quantity * gtotalWeight; // Multiply quantity by total weight
            $(this).find('.calculated-subitem').text(calculatedValue.toFixed(2)); // Update calculated value
        });

        // Alert to check updated sub-item values
        /*alert(`Sub-Item Calculations Updated`);*/
    }







// Trigger sub-item details fetch and update rows
$('#productDropdown').change(function () {
    var productId = $(this).val(); // Get the selected product ID

    if (productId) {
        $.ajax({
            url: '@Url.Action("GetSubItemDetails", "NewProduction")', // Replace with your actual action name
            type: 'GET',
            data: { productId: productId },
            success: function (data) {
                if (data && data.length > 0) {
                    // Clear existing rows in both tables
                    $('#selectedProducts tbody').empty();
                    $('#productTypeTable tbody').empty();

                    // Loop through sub-items and append rows to the respective table
                    data.forEach((subItem, index) => {
                        let newRow = `
                        <tr>
                            <td>${index + 1}</td>

                             <td  style="display:none;">
                             <input type="hidden" name="SubItemProduction[${index}].ProductId" value="${subItem.ProductId}" />

                            </td>

                            <td>
                                <input type="text" readonly class="form-control"
                                   name="SubItemProduction[${index}].Product.Name"
                                   value="${subItem.ProductName}" />
                            </td>
                            `;

                        if (!subItem.manufacturable) {
                            // Add Quantity (readonly), Unit, and Calculated Subitem for non-manufacturable
                            newRow += `
                            <td>
                                <input type="text" readonly class="form-control"
                                       name="SubItemProduction[${index}].Quantity"
                                       value="${subItem.Quantity}"
                                       placeholder="Quantity" />
                            </td>
                            <td>
                                <input type="text" readonly class="form-control"
                                       name="SubItemProduction[${index}].Unit"
                                       value="${subItem.Unit}"
                                       placeholder="Unit" />
                            </td>
                            <td>
                                <span class="calculated-subitem">0.00</span>
                            </td>`;
                        } else {
                            // Add editable Quantity and Unit (readonly) for manufacturable
                            newRow += `
                            <td>
                                <input type="text" class="form-control production-qty1"
                                    data-variable-product-id="${subItem.VariableProduct}"
                                    name="SubItemProduction[${index}].Quantity"
                                    value="${subItem.Quantity}"
                                    placeholder="Quantity" />
                            </td>
                            <td>
                                <input type="text" readonly class="form-control"
                                       name="SubItemProduction[${index}].Unit"
                                       value="${subItem.Unit}"
                                       placeholder="Unit" />
                            </td>
                            <td>
                                <input type="text" readonly class="form-control"
                                       name="SubItemProduction[${index}].Product.PType"
                                       value="${subItem.PType}"
                                       placeholder="Product Type" />
                            </td>
                            <td>
                            <input type="hidden"
                                name="SubItemProduction[${index}].Product.VarProdParentId"
                                value="${subItem.VariableProduct}" />
                        </td>
                            `;
                        }

                        newRow += `</tr>`;

                        // Append the row to the appropriate table
                        if (!subItem.manufacturable) {
                            $('#selectedProducts tbody').append(newRow); // Append to Manufacturable table
                        } else {
                            $('#productTypeTable tbody').append(newRow); // Append to Product Type table
                        }
                    });

                    // Update calculations after adding rows
                    updateSubItemCalculations();
                } else {
                    // If no data, clear tables and show alert
                    $('#selectedProducts tbody').empty();
                    $('#productTypeTable tbody').empty();
                    /*alert('No sub-item details found.');*/
                }
            },
            error: function () {
               /* alert('Failed to fetch sub-item details.');*/
            }
        });
    } else {
        // If no product selected, clear both tables
        $('#selectedProducts tbody').empty();
        $('#productTypeTable tbody').empty();
    }
});
   @*$('#validateBtn').click(function (event) {
     event.preventDefault();
     alert("Button Clicked!"); // Debugging alert

     let productUpdates = [];

       $('#selectedProducts > tbody > tr').each(function () {
           let productionId = $("#PostProduction_Id").val(); // This should be inside each row if needed
           /*let productId = $(this).find("input[name^='SubItemProduction'][name$='.ProductId']").val() || "";*/
           let productId = $(this).find("input[name^='SubItemProduction'][name$='.ProductId']").val() || "";

           let productName = $(this).find("[name*='Product.Name']").val() || "";
           /*let quantity = parseFloat($(this).find("[name*='Quantity']").val()) || 0;*/
           let quantity = parseFloat($(this).find("input[name^='SubItemProduction'][name$='.Quantity']").val()) || 0;

           let gtotalWeight = 15; // Ensure this value is set correctly
           let calculatedValue = quantity * gtotalWeight;
           let stock = parseFloat($(this).find("[name*='Stock']").val()) || 0;
           let subtractValue = stock - calculatedValue;

           productUpdates.push({
               productionId: productionId,
               productId: productId,
               productName: productName,
               calculatedValue: calculatedValue,
               stock: stock,
               subtractValue: subtractValue
           });
       });

     console.log("Final Product Updates List:", productUpdates);

       if (productUpdates.length > 0) {

         //alert("Sending AJAX Request..."); // Debugging alert
         $.ajax({
             url: '@Url.Action("EIncreasedStock", "NewProduction")',
             type: 'POST',
             contentType: 'application/json',
             data: JSON.stringify({ updates: productUpdates }),
             headers: {
                 'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
             },
             success: function (response) {
                 alert(response.message);
                 if (response.success) {
                     $("#newProductionForm").submit();
                 }
             },
             error: function (xhr, status, error) {
                 alert("An error occurred while updating the stock.");
                 console.error("Error:", error);
             }
         });
     } else {
         /*alert("No products to validate.");*/
     }
 });*@
     $('#validateBtn').click(function (event) {
    event.preventDefault();
    /*alert("Button Clicked!");*/ // Debugging alert

    let productUpdates = [];

         $('#productTypeTable > tbody > tr').each(function () {
             let productionId = $("#PostProduction_Id").val(); // This should be inside each row if needed
             /*let productId = $(this).find("input[name^='SubItemProduction'][name$='.ProductId']").val() || "";*/
             let productId = $(this).find("input[name^='SubItemProduction'][name$='.ProductId']").val() || "";

             let productName = $(this).find("[name*='Product.Name']").val() || "";
             /*let quantity = parseFloat($(this).find("[name*='Quantity']").val()) || 0;*/
             let quantity = parseFloat($(this).find("input[name^='SubItemProduction'][name$='.Quantity']").val()) || 0;

             let gtotalWeight = 15; // Ensure this value is set correctly
             let calculatedValue = quantity * gtotalWeight;
             let stock = parseFloat($(this).find("[name*='Stock']").val()) || 0;
             let subtractValue = stock - calculatedValue;

             productUpdates.push({
                 productionId: productionId,
                 productId: productId,
                 productName: productName,
                 calculatedValue: calculatedValue,
                 stock: stock,
                 subtractValue: subtractValue
             });
         });

         console.log("Final Product Updates List:", productUpdates);

      if (productUpdates.length > 0) {

        /*alert("Sending AJAX Request...");*/ // Debugging alert
        $.ajax({
            url: '@Url.Action("EIncreasedStock", "NewProduction")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ updates: productUpdates }),
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                /*alert(response.message);*/
                if (response.success) {
                    $("#postProductionForm").submit();
                }
            },
            error: function (xhr, status, error) {
                /*alert("An error occurred while updating the stock.");*/
                console.error("Error:", error);
            }
        });
    } else {
        /*alert("No products to validate.");*/
    }
});



    txtSerialNum = 0;
    TriggerBodyEvents();



    @{
        var carton = 0; //= (d.Stock / d.PerPack);
        var piece = 0;
        foreach (var d in Model.Products)
        {
            carton = (int)(d.Stock / d.PerPack);
            piece = (int)(d.Stock % d.PerPack);
           if (piece == 0)
 {
    @:products.push([ "@d.Id", "@d.Name", "@d.Unit", "@d.Unit", "@carton" ]);
 }
 else
 {
     @:products.push(["@d.Id", "@d.Name", "@d.SalePrice", "@carton,@piece"]);
 }
 @:productsBarcodes.push(["@d.Id", "@d.BarCode"]);

        }
     }

     var i;
     var sodCount = "@Model.SubItems.Count()";
     for (i = 0; i < sodCount; i++)
     {

         txtSerialNum = i;
         OnTypeName('#name' + i);
         TriggerBodyEvents();
     }



        $('.from-date-picker').datetimepicker({
            dateFormat: "dd-M-yy",
            timeFormat: "hh:mm tt",
            showOn: "both",
            timeInput: true,
            stepHour: 1,
            stepMinute: 5,
            oneLine: true,
            //changeMonth: true,
            //changeYear: true,
            controlType: 'select',
            buttonImageOnly: true,
            buttonImage: "http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",
            buttonText: "Select date"
        });




         $("#NewData").dialog({
            autoOpen: false,
             title: 'Should not sell-out, already rented on thses dates',
            closeText: '', //Changes the text of the titlebar-close button to hello instead of default Close
            width: 500,
            Height:500

        });

        function FetchProductRentStatus() {
        //alert('wwww');

            var date = new Date();
            var day = date.getDate();       // yields date
            var month = date.getMonth() + 1;    // yields month (add one as '.getMonth()' is zero indexed)
            var year = date.getFullYear();  // yields year
            var hour = date.getHours();     // yields hours
            var minute = date.getMinutes(); // yields minutes
            var second = date.getSeconds(); // yields seconds

            // After this construct a string with the above results as below
            var sellDate = day + "/" + month + "/" + year;// + " " + hour + ':' + minute + ':' + second;

            var prodId = $('#idn' + clickedIdNum).val();




            $.ajax({
                url: "@Url.Action("ProductRentStatus","SOSR")",
                data: { 'prodId': prodId, 'sellDate': sellDate},
                type: "GET",
                cache: false,
                success: function (data) {
                    //toastr.success('Hi! I am success message.');
                    //var abc = data;
                    //alert(data);
                    if (data.indexOf('12:00:00 AM') != -1) {

                        $("#NewData").html(data);
                        $("#NewData").dialog("open");
                    //}
                    }


                },
                error: function (xhr, ajaxOptions, thrownError) {
                    //$('#lblCommentsNotification').text("Error encountered while saving the comments.");
                    /*alert('Data provided was not valid');*/
                }
            });
        }

        //alert(IsReturn);

        $('#isService').on('change', function () {
            if (this.value == 'true')
            //.....................^.......
            {
                $("#pprice").hide();
                $("#stk").hide();
            }
            else {
                $("#pprice").show();
                $("#stk").show();
            }
        });

</script>
@*@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }*@

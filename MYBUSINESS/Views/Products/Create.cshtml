@model MYBUSINESS.Models.ProductViewModel

@{
    ViewBag.Title = "Create Product";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.css">
<script type="text/javascript" src="//code.jquery.com/jquery-1.9.1.js"></script>
<script type="text/javascript" src="//code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-sliderAccess.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.js"></script>
@*<link href="@Url.Content("~/Content/custom/custom.css")" rel="stylesheet" type="text/css" />*@
<script src="~/Content/custom/downloads/jquery.mcautocomplete.js"></script>
<script src="~/Content/custom/downloads/jquery.scannerdetection.js"></script>
<script src="~/Content/custom/productDetail.js"></script>

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <section class="content">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="row">
                <!-- left column -->
                <div class="col-md-6">
                    <!-- general form elements -->
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">Create New Product</h3>
                        </div>

                        <form role="form">
                            <div class="box-body">


                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label" })*@
                                    <lebel>Product Ref</lebel>

                                    @Html.EditorFor(model => Model.Product.Id, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.SuggestedId, @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.Product.Id, "", new { @class = "text-danger" })

                                </div>

                                @*@Html.HiddenFor(model => model.IsService, new { Value = "false" })*@
                                @Html.HiddenFor(model => model.Product.ShowIn, new { Value = "P" })

                                <div style="display:none;" class="form-group">
                                    <select class="form-control" name="IsService" id="isService">
                                        <option value="false" selected>Product</option>
                                        <option value="true">Service</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.BarCode, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.BarCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.BarCode, "", new { @class = "text-danger" })

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => Model.Product.EInvoicePCode, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.EInvoicePCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.EInvoicePCode, "", new { @class = "text-danger" })

                                </div>
                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })*@
                                    <lebel><b>Product Name English</b></lebel>

                                    @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                    @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })

                                </div>

                                <div class="form-group">
                                    <lebel><b>Product Name Vietnamese</b></lebel>
                                    <input type="text" class="form-control" name="prouctNameInVnd" id="prouctNameInVnd" />
                                </div>

                                <div class="form-group">
                                    @*@Html.LabelFor(model => model.Saleable, htmlAttributes: new { @class = "control-label" })*@
                                    <label>Supplier </label>
                                    <input type="text" autocomplete="off" class="form-control" name="Name0" id="supplier" value="" placeholder="Supplier" data-toggle="tooltip" data-placement="top" title="Supplier">
                                </div>

                                <div class="form-group">
                                    <label><b>Category</b></label>
                                    <select class="form-control" name="Product.Category" id="selectCategory" required>
                                        <option value="" selected>Select</option>
                                        <option value="Box">Box</option>
                                        <option value="Bar">Bar</option>
                                        <option value="Bag">Bag</option>
                                        <option value="Miscellaneous">Miscellaneous</option>
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label><b>Unit</b><span style="color: red;"> *</span></label>
                                    <select class="form-control" name="Product.Unit" id="selectUnit" required>
                                        <option value="" selected>Select</option>
                                        <option value="Box">Box</option>
                                        <option value="Kg">Kg</option>
                                        <option value="Gram">Gram</option>
                                        <option value="Liter">Liter</option>
                                    </select>
                                </div>


                                @*<div class="form-group">
            <label><b>Unit</b></label>
            <select class="form-control" name="Product.Unit" id="selectUnit">
                <option value="" selected>Select</option>
                <option value="Box">Box</option>
                <option value="Kg">Kg</option>
                <option value="Liter">Unit</option>
                <option value="Liter">Liter</option>
            </select>
        </div>*@


                                <div id="pprice" class="form-group">
                                    @*@Html.LabelFor(model => model.PurchasePrice, htmlAttributes: new { @class = "control-label" })*@
                                    <lebel><b>Purchase Price</b></lebel>
                                    @Html.EditorFor(model => model.Product.PurchasePrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.PurchasePrice, "", new { @class = "text-danger" })

                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.SalePrice, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.SalePrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.SalePrice, "", new { @class = "text-danger" })

                                </div>

                                <div class="form-group">
                                    <leble><b>Excluded Sale Price (VAT) </b></leble>

                                    @Html.EditorFor(model => model.Product.SalePrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.SalePrice, "", new { @class = "text-danger" })

                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Product.WholeSalePrice, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.WholeSalePrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.WholeSalePrice, "", new { @class = "text-danger" })

                                </div>
                                <div id="stk" class="form-group">

                                    @Html.LabelFor(model => model.Product.Stock, htmlAttributes: new { @class = "control-label" })
                                    @{
                                        MYBUSINESS.Models.Employee currentUser = (MYBUSINESS.Models.Employee)HttpContext.Current.Session["CurrentUser"];
                                        if (currentUser.EmployeeTypeId == 0)
                                        {
                                            @Html.EditorFor(model => model.Product.Stock, new { htmlAttributes = new { @class = "form-control", @id = "stock" } })
                                        }
                                        else
                                        {
                                            @Html.EditorFor(model => model.Product.Stock, new { htmlAttributes = new { @class = "form-control", @id = "stock", @disabled = "disabled" } })
                                        }
                                    }

                                    @Html.ValidationMessageFor(model => model.Product.Stock, "", new { @class = "text-danger" })

                                </div>
                                <div id="stk" class="form-group">
                                    @Html.LabelFor(model => model.Product.Remarks, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.Remarks, new { htmlAttributes = new { @class = "form-control", @id = "Remarks" } })
                                    @Html.ValidationMessageFor(model => model.Product.Remarks, "", new { @class = "text-danger" })

                                </div>
                                <div style="display:none;" id="ppack" class="form-group">

                                    @Html.LabelFor(model => model.Product.PerPack, htmlAttributes: new { @class = "control-label" }) (at least 1)

                                    @Html.EditorFor(model => model.Product.PerPack, new { htmlAttributes = new { @class = "form-control", @id = "perPack", @Value = 1 } })
                                    @Html.ValidationMessageFor(model => model.Product.PerPack, "", new { @class = "text-danger" })

                                </div>







                                <!--<!--<!--<div style="display:none;" class="form-group">
    @*Html.LabelFor(model => model.Saleable, htmlAttributes: new { @class = "control-label" })*@




    </div>-->

                                <div class="form-group">
                                    <label>Finished Product</label>
                                    <input type="checkbox" class="form-check-input" id="finishedproduct" name="FinishedProduct" value="4"
                                           @(Model.Product.PType & 4)= =4 ? "checked" : "" />

                                    <br />

                                    <label>Ingredient</label>
                                    <input type="checkbox" class="form-check-input" id="ingredients" name="Ingredient" value="5"
                                           @(Model.Product.PType & 5)= =5 ? "checked" : "" />

                                    <br />

                                    <label>Intermediary Ingredient</label>
                                    <input type="checkbox" class="form-check-input" id="intermediaryingredient" name="IntermediaryIngredient" value="6"
                                           @(Model.Product.PType & 6)= =6 ? "checked" : "" />

                                    <br />

                                    <label>Merchandise</label>
                                    <input type="checkbox" class="form-check-input" id="merchandise" name="Merchandise" value="7"
                                           @(Model.Product.PType & 7)= =7 ? "checked" : "" />

                                </div>


                                <div class="form-group">
                                    <label>Variable Product</label>
                                    <input type="checkbox" class="form-check-input" id="variableProduct" name="VariableProduct" value="1"
                                           @(Model.Product.PType & 1)= =1 ? "checked" : "" />
                                    <br />

                                    <!-- Product Dropdown - Initially Hidden -->
                                    <div class="form-group" id="productDropdownContainer" style="display: none;">
                                        @Html.LabelFor(model => model.Product.VarProdParentId, "Select Product", new { @class = "control-label" })
                                        @Html.DropDownListFor(
                                                                    model => model.Product.VarProdParentId,
                                                                    ViewBag.ProductList as List<SelectListItem>,
                                                                    "Select a Product",
                                                                    new { @class = "form-control product-dropdown", @id = "productDropdown" }
                                                                )
                                        @Html.ValidationMessageFor(model => model.Product.VarProdParentId, "", new { @class = "text-danger" })
                                    </div>


                                    <label>Excess Product</label>
                                    <input type="checkbox" class="form-check-input" id="excessProduct" name="ExcessProduct" value="2"
                                           @(Model.Product.PType & 2)= =2 ? "checked" : "" />
                                    <br />

                                    <label>ByProduct</label>
                                    <input type="checkbox" class="form-check-input" id="byProduct" name="ByProduct" value="4"
                                           @(Model.Product.PType & 4)= =4 ? "checked" : "" />
                                </div>
                                <input type="hidden" name="ProductType" value="@Model.Product.PType" />



                            </div>
                            <div class="box-footer">
                                <input type="submit" value="Create" id="CreateProduct" class="btn btn-primary" />
                                @Html.ActionLink("Back to List", "Index")
                            </div>

                        </form>



                    </div>
                </div>
                <div class="col-md-6">
                    <!-- general form elements -->
                    <!-- general form elements -->
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">Shape Detail</h3>
                        </div>


                        <div class="box-body">



                            <table id="selectedProducts" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <!--<th style="width:5%;">#</th>-->
                                        @*<th>Index</th>
                                            <th>pId</th>*@
                                        <!--<th style="width:60%;">Name</th>


                                        <th style="width:20%;">Unit</th>
                                        <th></th>-->
                                        <th style="width: 5%;">#</th>
                                        <th style="width: 50%;">Shape</th>
                                        @*<th style="width: 12%;">Qty</th>*@
                                        <th style="width: 20%;">Weight</th>
                                        <th style="width: 12%;"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>

                                        <td id="SNo0">1</td>

                                        <td style="display:none;"><input type="hidden" name="ProductDetail.Index" value="0" /></td>
                                        <td style="display:none;"><input type="text" readonly class="form-control classBGcolor" name="ProductDetail[0].ProductId" id="idn0"></td>
                                        <td><input type="text" autocomplete="off" class="form-control" name="ProductDetail[0].Shape" id="shape0" placeholder="" data-toggle="tooltip" data-placement="top" title=""></td>
                                        <td><input type="number" step="any" autocomplete="off" class="form-control" name="ProductDetail[0].Weight" id="weight0"></td>
                                        <td>
                                            <button type="button" id="delete0" class="delete btn btn-default add-new">
                                                <a class="delete" title="Delete" data-toggle="tooltip">
                                                    <i class="material-icons">&#xE872;</i>
                                                </a>
                                            </button>

                                        </td>


                                    </tr>

                                </tbody>

                            </table>


                            <div class="table-title">
                                <div class="row">
                                    <div class="col-sm-3">
                                        <button type="button" id="addNewRow" class="btn btn-primary add-new" style="background-color: #2bbdb9;"><i class="fa fa-plus"></i> New Row</button>
                                    </div>
                                </div>
                            </div>

                        </div>




                    </div>
                </div>


            </div>
        }
    </section>
</div>


    <script>
        $(document).ready(function () {
            
            $("#finishedproduct, #ingredients, #intermediaryingredient, #merchandise").on("change", function () {
                if ($(this).is(":checked")) {
                    // Uncheck other main category checkboxes
                    $("#finishedproduct, #ingredients, #intermediaryingredient, #merchandise").not(this).prop("checked", false);

                    // Hide dropdown container if any main category is selected
                    $('#productDropdownContainer').slideUp();

                    // Disable and uncheck Variable, Excess, and ByProduct checkboxes
                    $("#variableProduct, #excessProduct, #byProduct").prop("checked", false).prop("disabled", true);
                } else {
                    // Enable Variable, Excess, and ByProduct checkboxes only if no main category is selected
                    if (!$("#finishedproduct, #ingredients, #intermediaryingredient, #merchandise").is(":checked")) {
                        $("#variableProduct, #excessProduct, #byProduct").prop("disabled", false);
                    }
                }
            });

            $("#variableProduct, #excessProduct, #byProduct").on("change", function () {
                if ($(this).is(":checked")) {
                    $("#purchasable, #saleable").prop("checked", false);

                    // If Variable Product is checked, don't uncheck Manufacturable
                    if (this.id === "variableProduct") {
                        $("#excessProduct, #byProduct").prop("checked", false);
                    }

                    // If Excess Product is checked
                    if (this.id === "excessProduct") {
                        $('#productDropdownContainer').slideUp();
                        $("#variableProduct, #byProduct").prop("checked", false);
                    }

                    // If By Product is checked
                    if (this.id === "byProduct") {
                        $('#productDropdownContainer').slideUp();
                        $("#variableProduct, #excessProduct").prop("checked", false);
                    }
                }
            });






            function toggleDropdown() {
                if ($('#variableProduct').is(':checked')) {
                    $('#productDropdownContainer').slideDown();
                } else {
                    $('#productDropdownContainer').slideUp();
                }
            }

            // Check initial state on page load
            toggleDropdown();

            // Attach event listener to checkbox
            $('#variableProduct').change(function () {
                toggleDropdown();
            });
        });
    //txtSerialNum = 0;
    TriggerBodyEvents();
@foreach (var d in ViewBag.Suppliers)
{
    @*@:products.push(["@d.Name","@d.PurchasePrice","@d.Stock"]);*@
    @:suppliers.push(["@d.Id","@d.Name", "@d.Address", "@d.Balance"]);
}


    OnTypeSupplierName('#supplier');

    $('#stock').keyup(function () {
        this.value = this.value.replace(/[^0-9]/g, '');
    });

    $('#isService').on('change', function () {
        if (this.value == 'true')
        //.....................^.......
        {
            $("#pprice").hide();
            $("#stk").hide();
        }
        else {
            $("#pprice").show();
            $("#stk").show();
        }
    });

    //$("#isService").change(function () {
    //    var ddv = this.value;
    //    //var firstDropVal = $('#pick').val();
    //    alert(ddv);
    //    if (ddv == true) {

    //    }
    //});
    //OnTypeSupplierName('#supplier');

    //$("#CreateProduct").click(function () {

    //    var wentRight = 1;
    //    var InvalidproductName;
    //    var idx = 0;

    //    if ($('#idnSupplier').val() == "") {
    //        alert('Supplier not selected. Please select supplier from list');
    //        return false;

    //    }

    //});

    //$('#packing,#perPack').keyup(function () {
    //    $("#stock").val($("#packing").val() * $("#perPack").val())
    //});


    </script>
    @*@section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
        }*@

@model MYBUSINESS.Models.ProductViewModel

@{
    ViewBag.Title = "Update Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">
<link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.css">
<script type="text/javascript" src="//code.jquery.com/jquery-1.9.1.js"></script>
<script type="text/javascript" src="//code.jquery.com/ui/1.9.2/jquery-ui.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-sliderAccess.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ui-timepicker-addon/1.6.1/jquery-ui-timepicker-addon.js"></script>
@*<link href="@Url.Content("~/Content/custom/custom.css")" rel="stylesheet" type="text/css" />*@
@*<script src="~/Content/custom/products.js"></script>*@
<script src="~/Content/custom/downloads/jquery.mcautocomplete.js"></script>
<script src="~/Content/custom/downloads/jquery.scannerdetection.js"></script>
<script src="~/Content/custom/productDetail.js"></script>
<div class="content-wrapper">
    <section class="content">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="row">
                <!-- left column -->
                <div class="col-md-6">
                    <!-- general form elements -->
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">Update Product</h3>
                        </div>




                        <form role="form">
                            <div class="box-body">


                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @*@Html.HiddenFor(model => model.Id)*@


                                <div class="form-group">
                                    @Html.LabelFor(model => Model.Product.Id, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.Id, new { htmlAttributes = new { @class = "form-control", @Readonly = "Readonly" } })
                                    @Html.ValidationMessageFor(model => model.Product.Id, "", new { @class = "text-danger" })

                                </div>

                                <div class="form-group">
                                    <label>Product Type</label>
                                    <select class="form-control" id="productTypeDropdown" name="ProductType">
                                        <option value="">-- Select Product Type --</option>
                                        <option value="1" @((Model.Product.PType & 1) == 1 ? "selected" : "")>Variable Product</option>
                                        <option value="2" @((Model.Product.PType & 2) == 2 ? "selected" : "")>Excess Product</option>
                                        <option value="3" @((Model.Product.PType & 3) == 3 ? "selected" : "")>ByProduct</option>
                                        <option value="4" @((Model.Product.PType & 4) == 4 ? "selected" : "")>Finished Product</option>
                                        <option value="5" @((Model.Product.PType & 5) == 5 ? "selected" : "")>Ingredient</option>
                                        <option value="6" @((Model.Product.PType & 6) == 6 ? "selected" : "")>Intermediary Ingredient</option>
                                        <option value="7" @((Model.Product.PType & 7) == 7 ? "selected" : "")>Merchandise</option>
                                        <option value="8" @((Model.Product.PType & 8) == 8 ? "selected" : "")>Flat Packaging</option>
                                        <option value="9" @((Model.Product.PType & 9) == 9 ? "selected" : "")>Finish Packaging</option>
                                    </select>
                                </div>

                                <!-- Product Dropdown - Show only if Variable Product is selected -->
                                <div class="form-group" id="productDropdownContainer" style="display: @((Model.Product.PType & 1) == 1 ? "block" : "none");">
                                    @Html.LabelFor(model => model.Product.VarProdParentId, "Select Product", new { @class = "control-label" })
                                    @Html.DropDownListFor(
                                        model => model.Product.VarProdParentId,
                                        ViewBag.ProductList as List<SelectListItem>,
                                        "Select a Product",
                                        new { @class = "form-control", @id = "productDropdown" }
                                    )
                                </div>



                                @*@Html.HiddenFor(model => model.IsService, new { Value = "false" })*@
                                @Html.HiddenFor(model => model.Product.ShowIn, new { Value = "P" })

                                <div style="display:none;" class="form-group">
                                    <select class="form-control" name="IsService" id="isService">
                                        <option value="false" selected>Product</option>
                                        <option value="true">Service</option>
                                    </select>
                                </div>
                                <div id="barcode-field" class="form-group optional-field">
                                    @Html.LabelFor(model => model.Product.BarCode, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.BarCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.BarCode, "", new { @class = "text-danger" })

                                </div>
                                <div id="einvoice-field" class="form-group optional-field">
                                    @Html.LabelFor(model => Model.Product.EInvoicePCode, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => Model.Product.EInvoicePCode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => Model.Product.EInvoicePCode, "", new { @class = "text-danger" })

                                </div>
                                @*<div class="form-group">
            @Html.LabelFor(model => Model.Product.EInvoicePCode, htmlAttributes: new { @class = "control-label" })

            @Html.EditorFor(model => model.Product.EInvoicePCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Product.EInvoicePCode, "", new { @class = "text-danger" })

        </div>*@

                                <div id="product-name-en" class="form-group">
                                    @*@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })*@
                                    <lebel><b>Product Name English</b></lebel>

                                    @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                    @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })

                                </div>

                                <div id="product-name-vn" class="form-group">
                                    <lebel><b>Product Name Vietnamese</b></lebel>
                                    @Html.EditorFor(model => Model.Product.PVATName, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                                    @Html.ValidationMessageFor(model => model.Product.PVATName, "", new { @class = "text-danger" })

                                </div>

                                <div id="supplier-field" class="form-group optional-field">
                                    @Html.LabelFor(model => model.Product.Supplier, htmlAttributes: new { @class = "control-label" })

                                    <input type="text"
                                           autocomplete="off"
                                           class="form-control"
                                           name="Product.Supplier"
                                           id="supplier"
                                           value="@Model.Product.Supplier"
                                           placeholder="Supplier"
                                           data-toggle="tooltip"
                                           data-placement="top"
                                           title="Supplier"
                                           required />

                                    @Html.ValidationMessageFor(model => model.Product.Supplier, "", new { @class = "text-danger" })
                                </div>


                                <div id="category-field" class="form-group optional-field">
                                    <label><b>Category</b></label>
                                    <select class="form-control" name="Product.Category" id="selectCategory">
                                        <option value="" @(Model.Product.Category == null ? "selected" : "")>Select</option>
                                        <option value="Box" @(Model.Product.Category == "Box" ? "selected" : "")>Box</option>
                                        <option value="Bar" @(Model.Product.Category == "Bar" ? "selected" : "")>Bar</option>
                                        <option value="Bag" @(Model.Product.Category == "Bag" ? "selected" : "")>Bag</option>
                                        <option value="Miscellaneous" @(Model.Product.Category == "Miscellaneous" ? "selected" : "")>Miscellaneous</option>
                                    </select>
                                </div>
                                @*<div class="form-group">
            <lebel>
                <b>Category</b>
            </lebel>
            <select class="form-control" id="selectCategory" name="Category">
                <option>Select</option>
                <option>Box</option>
                <option>Bar</option>
                <option>Bag</option>
                <option>Miscellanous</option>
            </select>

        </div>*@
                                <div id="unit-field" class="form-group optional-field">
                                    <label><b>Unit</b><span style="color: red;"> *</span></label>
                                    <select class="form-control" name="Product.Unit" id="selectUnit">
                                        <option value="" @(Model.Product.Unit == null ? "selected" : "")>Select</option>
                                        <option value="Box" @(Model.Product.Unit == "Box" ? "selected" : "")>Box</option>
                                        <option value="Kg" @(Model.Product.Unit == "Kg" ? "selected" : "")>Kg</option>
                                        <option value="Gram" @(Model.Product.Unit == "Gram" ? "selected" : "")>Gram</option>
                                        <option value="Liter" @(Model.Product.Unit == "Liter" ? "selected" : "")>Liter</option>
                                    </select>
                                </div>

                                <div id="purchase-price-field" class="form-group optional-field">
                                    @*@Html.LabelFor(model => model.PurchasePrice, htmlAttributes: new { @class = "control-label" })*@
                                    <lebel><b>Purchase Price</b></lebel>
                                    @Html.EditorFor(model => model.Product.PurchasePrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.PurchasePrice, "", new { @class = "text-danger" })

                                </div>

                                <div id="sale-price-field" class="form-group optional-field">
                                    @*@Html.LabelFor(model => model.Product.SalePrice, htmlAttributes: new { @class = "control-label" })*@
                                    <leble><b>Excluded Sale Price (VAT) </b></leble>

                                    @Html.EditorFor(model => model.Product.SalePrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.SalePrice, "", new { @class = "text-danger" })

                                </div>

                                @*<div class="form-group">
            <leble><b>Excluded Sale Price (VAT) </b></leble>

            @Html.EditorFor(model => Model.Product.ExcludedSalePrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Product.ExcludedSalePrice, "", new { @class = "text-danger" })

        </div>*@
                                <div id="wholesale-field" class="form-group optional-field">
                                    @Html.LabelFor(model => model.Product.WholeSalePrice, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.WholeSalePrice, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Product.WholeSalePrice, "", new { @class = "text-danger" })

                                </div>
                                <div id="stk" class="form-group" style="display:none">

                                    @Html.LabelFor(model => model.Product.Stock, htmlAttributes: new { @class = "control-label" })
                                    @{
                                        MYBUSINESS.Models.Employee currentUser = (MYBUSINESS.Models.Employee)HttpContext.Current.Session["CurrentUser"];
                                        if (currentUser.EmployeeTypeId == 0)
                                        {
                                            @Html.EditorFor(model => model.Product.Stock, new { htmlAttributes = new { @class = "form-control", @id = "stock" } })
                                        }
                                        else
                                        {
                                            @Html.EditorFor(model => model.Product.Stock, new { htmlAttributes = new { @class = "form-control", @id = "stock", @disabled = "disabled" } })
                                        }
                                    }

                                    @Html.ValidationMessageFor(model => model.Product.Stock, "", new { @class = "text-danger" })

                                </div>
                                <div id="stk" class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.Product.Remarks, htmlAttributes: new { @class = "control-label" })

                                    @Html.EditorFor(model => model.Product.Remarks, new { htmlAttributes = new { @class = "form-control", @id = "Remarks" } })
                                    @Html.ValidationMessageFor(model => model.Product.Remarks, "", new { @class = "text-danger" })

                                </div>
                                <div style="display:none;" id="ppack" class="form-group">
                                    @Html.LabelFor(model => model.Product.PerPack, htmlAttributes: new { @class = "control-label" }) (at least 1)

                                    @Html.EditorFor(model => model.Product.PerPack, new { htmlAttributes = new { @class = "form-control", @id = "perPack", @Value = 1 } })
                                    @Html.ValidationMessageFor(model => model.Product.PerPack, "", new { @class = "text-danger" })

                                </div>




                            </div>
                            <div class="box-footer">
                                <input type="submit" value="Update" id="CreateProduct" class="btn btn-primary" />
                                @Html.ActionLink("Back to List", "Index")
                            </div>

                        </form>

                    </div>
                </div>
                <div id="shape-detail" class="col-md-6 optional-field product-detail-section">
                    <!-- general form elements -->
                    <!-- general form elements -->
                    <div class="box box-primary">
                        <div class="box-header with-border">
                            <h3 class="box-title">Product Details</h3>
                        </div>


                        <div  class="box-body">



                            <table id="selectedProducts" class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th style="width: 5%;">#</th>
                                        <th style="width: 50%;">Shape</th>
                                        <th style="width: 20%;">Weight</th>
                                        <th style="width: 12%;"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.ProductDetail != null && Model.ProductDetail.Count > 0)
                                    {
                                        int sNo = 0;
                                        foreach (var item in Model.ProductDetail)
                                        {
                                            <tr>
                                                <td id="Pr@(sNo)">@(sNo + 1)</td>
                                                <td style="display:none;">
                                                    <input type="hidden" name="ProductDetail.Index" value="@sNo" />
                                                </td>
                                                <td style="display:none;">
                                                    <input type="text" value="@item.ProductId" readonly class="form-control classBGcolor"
                                                           name="ProductDetail[@sNo].ProductId" id="idn@(sNo)">
                                                </td>
                                                <td>
                                                    <input type="text" autocomplete="off" value="@(item.Shape)" class="form-control"
                                                           name="ProductDetail[@sNo].Shape" id="shape@(sNo)" placeholder="Type shape"
                                                           data-toggle="tooltip" data-placement="top" title="Type shape">
                                                </td>
                                                <td>
                                                    <input type="number" step="any" autocomplete="off" value="@(item.Weight)" class="form-control"
                                                           name="ProductDetail[@sNo].Weight" id="weight@(sNo)" placeholder="Type weight"
                                                           data-toggle="tooltip" data-placement="top" title="Type weight">
                                                </td>
                                                <td>

                                                    <button type="button" id="delete@(sNo)" class="delete btn btn-default add-new"><a class="delete" title="Delete" data-toggle="tooltip"><i class="material-icons">&#xE872;</i></a></button>
                                                </td>

                                            </tr>
                                            sNo += 1;
                                        }
                                    }
                                </tbody>
                            </table>



                            <div class="table-title">
                                <div class="row">
                                    <div class="col-sm-3">
                                        <button type="button" id="addNewRow" class="btn btn-primary add-new" style="background-color: #2bbdb9;"><i class="fa fa-plus"></i> New Row</button>
                                    </div>
                                </div>
                            </div>

                        </div>




                    </div>
                </div>



            </div>
        }
    </section>
</div>
<script>

  //$(document).ready(function () {
  //  document.getElementById('SOCreate').reset(); // has to be handle
  //});
    $(document).ready(function () {
        console.log("Current product type value:", $('#productTypeDropdown').val());

        // Function to show/hide fields based on product type
        function showFieldsForCurrentProductType() {
            // Hide all optional fields first
            $('.optional-field').hide();
            $('#shape-detail').hide();
            $('#productDropdownContainer').hide();

            // Get selected product type
            const productType = $('#productTypeDropdown').val();

            // Always show these required fields
            $('#product-name-en, #product-name-vn').show();

            // Show fields based on product type
            switch (productType) {
                case "1": // Variable Product
                    $('#supplier-field, #category-field, #unit-field').show();
                    $('#productDropdownContainer').show();
                    break;
                case "2": // Excess Product
                    $('#supplier-field, #category-field, #unit-field').show();
                    break;
                case "3": // ByProduct
                    $('#supplier-field, #category-field, #unit-field').show();
                    break;
                case "4": // Finished Product
                    $('#barcode-field, #einvoice-field, #supplier-field, #category-field, #unit-field, #sale-price-field, #wholesale-field, #shape-detail').show();
                    break;
                case "5": // Ingredient
                    $('#supplier-field, #category-field, #unit-field, #purchase-price-field').show();
                    break;
                case "6": // Intermediary Ingredient
                    $('#supplier-field, #category-field, #unit-field, #shape-detail').show();
                    break;
                case "7": // Merchandise
                    $('#supplier-field, #category-field, #unit-field, #purchase-price-field').show();
                    break;
                case "8": // Flat Packaging
                case "9": // Finish Packaging
                    $('#supplier-field, #category-field, #unit-field').show();
                    break;
                default:
                    // Default case if nothing is selected
                    break;
            }
        }

        // Initialize the fields visibility immediately when page loads
        showFieldsForCurrentProductType();

        // Also handle product type dropdown change
        $("#productTypeDropdown").on("change", function () {
            showFieldsForCurrentProductType();
        });
    });
    
      @*$('#productDropdown').change(function () {
          var productId = $(this).val(); // Get selected product ID
          alert('hi');
          if (productId) {
              $.ajax({
                  url: '@Url.Action("GetProductUnit", "BOM")',
                  type: 'GET',
                  data: { id: productId },
                  success: function (data) {
                      $('#unitField').val(data.unit); // Update the unit field
                  },
                  error: function () {
                      alert('Failed to fetch unit details.');
                  }
              });
          } else {
              $('#unitField').val(''); // Clear the unit field if no product selected
          }
      });*@

    @{
        var carton = 0; //= (d.Stock / d.PerPack);
        var piece = 0;
        if (Model.Products !=null )
            {
                 foreach (var d in Model.Products)
                 {
                     carton = (int)(d.Stock / d.PerPack);
                     piece = (int)(d.Stock % d.PerPack);
                     if (piece == 0)
                     {
                         @:products.push(["@d.Id", "@d.Name", "@d.SalePrice", "@carton"]);
                     }
                     else
                     {
                         @:products.push(["@d.Id", "@d.Name", "@d.SalePrice", "@carton,@piece"]);
                     }
                     @:productsBarcodes.push(["@d.Id", "@d.BarCode"]);

                 }
            }

     }

     var i;
     var sodCount = "@Model.ProductDetail.Count()";
     for (i = 0; i < sodCount; i++)
     {

         txtSerialNum = i;
         OnTypeName('#name' + i);
         TriggerBodyEvents();
     }



        $('.from-date-picker').datetimepicker({
            dateFormat: "dd-M-yy",
            timeFormat: "hh:mm tt",
            showOn: "both",
            timeInput: true,
            stepHour: 1,
            stepMinute: 5,
            oneLine: true,
            //changeMonth: true,
            //changeYear: true,
            controlType: 'select',
            buttonImageOnly: true,
            buttonImage: "http://jqueryui.com/resources/demos/datepicker/images/calendar.gif",
            buttonText: "Select date"
        });




         $("#NewData").dialog({
            autoOpen: false,
             title: 'Should not sell-out, already rented on thses dates',
            closeText: '', //Changes the text of the titlebar-close button to hello instead of default Close
            width: 500,
            Height:500

        });


        $('#isService').on('change', function () {
            if (this.value == 'true')
            //.....................^.......
            {
                $("#pprice").hide();
                $("#stk").hide();
            }
            else {
                $("#pprice").show();
                $("#stk").show();
            }
        });

    $('#stock').keyup(function () {
        this.value = this.value.replace(/[^0-9]/g, '');
    });

</script>
@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
*@